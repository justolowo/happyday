[
["index.html", "Statistics for Geography (GEOG 533) Preface", " Statistics for Geography (GEOG 533) Dr. Qiusheng Wu 2016-11-20 Preface This is the site for lecture materials for Statistics for Geography (GEOG 533) "],
["about-the-author.html", "About the Author", " About the Author Dr. Qiusheng Wu (http://wetlands.io) is an Assistant Professor in the Department of Geography, Binghamton University, State University of New York "],
["discrete-probability.html", "1 Discrete Probability 1.1 Counting the number of combinations 1.2 Generating combinations 1.3 Generating random numbers 1.4 Generating reproducible random numbers 1.5 Generating a random sample 1.6 Generating random sequences 1.7 Binomial Distribution 1.8 Geometric distribution 1.9 Poisson Distribution", " 1 Discrete Probability You can download the original R notebook document for this page HERE. 1.1 Counting the number of combinations Calculate the number of combinations of n items taken k at a time choose(3,2) ## [1] 3 factorial(3)/(factorial(2)*factorial(3-2)) ## [1] 3 1.2 Generating combinations Generate all combinations of n items taken k at a time combn(1:5,3) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 1 1 1 1 1 1 2 2 2 3 ## [2,] 2 2 2 3 3 4 3 3 4 4 ## [3,] 3 4 5 4 5 5 4 5 5 5 combn(c(&quot;T1&quot;,&quot;T2&quot;,&quot;T3&quot;,&quot;T4&quot;,&quot;T5&quot;),3) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] &quot;T1&quot; &quot;T1&quot; &quot;T1&quot; &quot;T1&quot; &quot;T1&quot; &quot;T1&quot; &quot;T2&quot; &quot;T2&quot; &quot;T2&quot; &quot;T3&quot; ## [2,] &quot;T2&quot; &quot;T2&quot; &quot;T2&quot; &quot;T3&quot; &quot;T3&quot; &quot;T4&quot; &quot;T3&quot; &quot;T3&quot; &quot;T4&quot; &quot;T4&quot; ## [3,] &quot;T3&quot; &quot;T4&quot; &quot;T5&quot; &quot;T4&quot; &quot;T5&quot; &quot;T5&quot; &quot;T4&quot; &quot;T5&quot; &quot;T5&quot; &quot;T5&quot; 1.3 Generating random numbers Generates one uniform random number runif(1) ## [1] 0.4220169 runif(10) ## [1] 0.7162645 0.5081791 0.8188029 0.1821157 0.3890650 0.6579844 0.1055432 ## [8] 0.1851911 0.3251996 0.1165987 runif(10,min = -3,max = 3) ## [1] 1.2901691 2.8126237 1.4009891 2.0641653 -0.7511080 0.7868881 ## [7] 0.8440551 2.6753751 -1.5227132 -0.9577037 Generates one random value from the standard normal distribution rnorm(10) ## [1] 0.29178064 0.88521618 0.71846641 0.05965551 -0.27079271 ## [6] -0.01225695 -1.71782356 0.79329173 -0.66076767 -1.15398553 rnorm(10,mean = 100,sd = 15) ## [1] 58.98743 106.30934 111.28459 96.62909 129.50003 98.29707 115.76973 ## [8] 70.71690 119.71344 120.84678 rnorm(3,mean = c(-10,0,10),sd = 1) ## [1] -10.8766403 0.8104184 9.6755578 1.4 Generating reproducible random numbers generate a sequence of random numbers, but you want to reproduce the same sequence every time your program runs set.seed(100) runif(10) ## [1] 0.30776611 0.25767250 0.55232243 0.05638315 0.46854928 0.48377074 ## [7] 0.81240262 0.37032054 0.54655860 0.17026205 set.seed(100) runif(10) ## [1] 0.30776611 0.25767250 0.55232243 0.05638315 0.46854928 0.48377074 ## [7] 0.81240262 0.37032054 0.54655860 0.17026205 1.5 Generating a random sample library(MASS) df &lt;- Cars93 sample(df$Price, 10) ## [1] 61.9 19.5 19.0 19.9 13.5 26.7 18.8 7.4 18.2 31.9 sample(df$Manufacturer,10) ## [1] Lexus Nissan Lexus Oldsmobile Ford Chevrolet ## [7] Volkswagen Pontiac Hyundai Dodge ## 32 Levels: Acura Audi BMW Buick Cadillac Chevrolet Chrylser ... Volvo 1.6 Generating random sequences set.seed(100) sample(1:10) ## [1] 4 3 5 1 9 6 10 2 8 7 sample(1:10,size = 10,replace = FALSE) ## [1] 7 8 3 9 5 4 1 2 6 10 sample(c(&quot;H&quot;,&quot;T&quot;),size = 10,replace = TRUE) ## [1] &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;H&quot; &quot;H&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;H&quot; sample(c(&quot;blue&quot;,&quot;yellow&quot;,&quot;red&quot;,&quot;green&quot;,&quot;purple&quot;),size = 5,replace = FALSE) ## [1] &quot;red&quot; &quot;green&quot; &quot;yellow&quot; &quot;purple&quot; &quot;blue&quot; births &lt;- sample(c(&quot;boy&quot;,&quot;girl&quot;),size = 10,replace = TRUE,prob = c(0.513,0.487)) births ## [1] &quot;girl&quot; &quot;boy&quot; &quot;girl&quot; &quot;girl&quot; &quot;boy&quot; &quot;boy&quot; &quot;girl&quot; &quot;girl&quot; &quot;girl&quot; &quot;girl&quot; table(births) ## births ## boy girl ## 3 7 manybirths &lt;- sample(c(&quot;boy&quot;,&quot;girl&quot;),size = 100000,replace = TRUE,prob = c(0.513,0.487)) table(manybirths) ## manybirths ## boy girl ## 51659 48341 1.7 Binomial Distribution 1.7.1 Probability functions Density function: dbinom(x, size, prob) Cumulative probability function: pbinom(q, size, prob, lower.tail = TRUE) dbinom(5,size = 10,prob = 0.5) ## [1] 0.2460938 dbinom(7,size = 10,prob = 0.5) ## [1] 0.1171875 pbinom(7,size = 10,prob = 0.5) ## [1] 0.9453125 pbinom(7,size = 10,prob = 0.5,lower.tail = FALSE) ## [1] 0.0546875 dbinom(6,size = 10,prob = 0.5) + dbinom(7,size = 10,prob = 0.5) ## [1] 0.3222656 pbinom(7,size = 10,prob = 0.5) - pbinom(5,size = 10,prob = 0.5) ## [1] 0.3222656 pbinom(c(5,7),size = 10,prob = 0.5) ## [1] 0.6230469 0.9453125 diff(pbinom(c(5,7),size = 10,prob = 0.5)) ## [1] 0.3222656 1.7.2 Plot probability functions n &lt;- 20 x &lt;- 0:n y &lt;- dbinom(x,size = n,prob = 0.5) plot(x,y) plot(x,y,type = &quot;b&quot;,pch = 16,col=&quot;black&quot;) n &lt;- 20 x &lt;- 0:n y &lt;- pbinom(x,size = n,prob = 0.5) plot(x,y) plot(x,y,type = &quot;b&quot;,pch = 16,col=&quot;black&quot;) x &lt;- seq(from = -3,to = 3,length.out = 100) y &lt;- dnorm(x) plot(x,y) plot(x,y,type = &quot;l&quot;,pch = 16,col=&quot;black&quot;) 1.8 Geometric distribution If the probability of success on each trial is p, then the probability that the kth trial (out of k trials) is the first success is: x represents the number of failures in a sequence of Bernoulli trials before success occurs. dgeom(x, prob) pgeom(x, prob) dgeom(0,prob = 0.5) ## [1] 0.5 dgeom(1,prob = 0.5) ## [1] 0.25 n &lt;- 10 x &lt;- 0:n y &lt;- dgeom(x,prob = 0.5) plot(x,y) plot(x,y,type = &quot;b&quot;,pch = 16,col=&quot;black&quot;,ylim = c(0,1)) y2 &lt;- dgeom(x, prob=0.8) lines(x,y2,type = &quot;b&quot;,pch = 16,col=&quot;red&quot;) y3 &lt;- dgeom(x, prob=0.2) lines(x,y3,type = &quot;b&quot;,pch = 16,col=&quot;blue&quot;) 1.9 Poisson Distribution During the last 60 days, there were 3 accidents. What’s the probability that there will be more than 3 accidents during the next month? dpois(x, lambda) ppois(q, lambda, lower.tail = TRUE) dpois(0,lambda = 1.5) ## [1] 0.2231302 dpois(1,lambda = 1.5) ## [1] 0.3346952 dpois(2,lambda = 1.5) ## [1] 0.2510214 dpois(3,lambda = 1.5) ## [1] 0.1255107 1- dpois(0,1.5)-dpois(1,1.5)-dpois(2,1.5)-dpois(3,1.5) ## [1] 0.06564245 ppois(3,lambda = 1.5,lower.tail = FALSE) ## [1] 0.06564245 n &lt;- 20 x &lt;- 0:n y &lt;- dpois(x,lambda = 1) plot(x,y) plot(x,y,type = &quot;b&quot;,pch = 16,col=&quot;black&quot;) y2 &lt;- dpois(x,lambda = 4) lines(x,y2,type = &quot;b&quot;,pch = 16,col=&quot;red&quot;) y3 &lt;- dpois(x,lambda = 10) lines(x,y3,type = &quot;b&quot;,pch = 16,col=&quot;blue&quot;) "],
["continuous-probability.html", "2 Continuous Probability 2.1 Uniform Distribution 2.2 Normal Distribution 2.3 Exponential Distribution 2.4 Raster function", " 2 Continuous Probability You can download the original R notebook document for this page HERE. 2.1 Uniform Distribution A uniform distribution, sometimes also known as a rectangular distribution, is a distribution that has constant probability. 2.1.1 Generating Random Samples function: runif(n, min = 0, max = 1) runif(10) ## Generating 10 random numbers following uniform distribution ## [1] 0.9214115 0.1139422 0.5338259 0.6590649 0.3102172 0.6973646 0.9732040 ## [8] 0.4906943 0.4427230 0.7985681 x &lt;- runif(100) hist(x) x &lt;- runif(10000) ## ## Generating 10,000 random numbers following uniform distribution hist(x) x &lt;- runif(1000000) ## Generating 1,000,000 random numbers following uniform distribution hist(x) 2.1.2 Probability Density Function function: dunif(x, min = 0, max = 1) x &lt;- runif(100,min = 0,max = 300) y &lt;- dunif(x,min = 100,max = 200) plot(x,y) 2.1.3 Cumulative Distribution Function function: punif(q, min = 0, max = 1, lower.tail = TRUE) x &lt;- runif(100,min = 0,max = 300) y2 &lt;- punif(x,min = 100,max = 200) plot(x,y2,xlim = c(0,300)) 2.1.4 Ploting using the curve function curve(dunif(x,min = 100,max = 200),from = 0,to = 300,n = 1000) curve(punif(x,min = 100,max = 200),from = 0,to = 300,n = 1000) curve(sin(x), -2*pi, 2*pi, xname = &quot;x&quot;,n = 1000) curve(cos(x2), -2*pi, 2*pi, xname = &quot;x2&quot;,n = 1000) 2.2 Normal Distribution 2.2.1 Generating Random Samples function: rnorm(n, mean = 0, sd = 1) rnorm(10) ## Generating 10 random numbers following normal distribution ## [1] -1.8816316 0.1059073 1.4579625 2.3310919 -0.1501891 0.4718377 ## [7] -0.4517342 -0.5538560 -1.1469592 -0.6838474 x &lt;- rnorm(100) hist(x) x &lt;- rnorm(10000) ## ## Generating 10,000 random numbers following normal distribution hist(x) x &lt;- rnorm(1000000) ## Generating 1,000,000 random numbers following normal distribution hist(x) 2.2.2 Probability Density Function function: dnorm(x, mean = 0, sd = 1) x &lt;- seq(-5,5,by = 0.01) y1 &lt;- dnorm(x) plot(x,y1,type=&quot;l&quot;,xlim=c(-5,5),ylim=c(0,1),lwd=2,col=&quot;red&quot;) y2 &lt;- dnorm(x,-2,sqrt(0.5)) lines(x,y2,type=&quot;l&quot;,xlim=c(-5,5),ylim=c(0,1),lwd=2,col=&quot;green&quot;) y3 &lt;- dnorm(x,0,sqrt(0.2)) lines(x,y3,type=&quot;l&quot;,xlim=c(-5,5),ylim=c(0,1),lwd=2,col=&quot;blue&quot;) curve(dnorm(x,0,1),from = -6,to = 6,col=&quot;red&quot;,lwd=2,xlim=c(-5,5),ylim=c(0,1)) curve(dnorm(x,-2,sqrt(0.5)),from = -6,to = 6,col=&quot;green&quot;,lwd=2,xlim=c(-5,5),ylim=c(0,1),add = TRUE) curve(dnorm(x,0,sqrt(0.2)),from = -6,to = 6,col=&quot;blue&quot;,lwd=2,xlim=c(-5,5),ylim=c(0,1),add = TRUE,n = 500) legend(&#39;topright&#39;,legend = c(&quot;N(0,1)&quot;,&quot;N(-2,0.5)&quot;,&quot;N(0,0.2)&quot;), lty=1, lwd=2,col=c(&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;), bty=&#39;n&#39;, cex=1) ### Shading a Region of Interest curve(dnorm(x,0,1),xlim=c(-3,3),main=&#39;Normal Density&#39;) cord.x &lt;- c(-2,seq(-2,2,0.01),2) cord.y &lt;- c(0,dnorm(seq(-2,2,0.01)),0) curve(dnorm(x,0,1),xlim=c(-3,3),main=&#39;Standard Normal&#39;,lwd=2) polygon(cord.x,cord.y,col=&#39;red&#39;) polygon(cord.x,cord.y,density = 10) 2.3 Exponential Distribution density function: dexp(x, rate = 1) cumulative distribution function: pexp(q, rate = 1, lower.tail = TRUE) curve(dexp(x,1),xlim = c(0,5),ylim=c(0,1.6),lwd=2,col=&quot;red&quot;) curve(dexp(x,0.5),xlim = c(0,5),lwd=2,col=&quot;green&quot;,add=TRUE) curve(dexp(x,1.5),xlim = c(0,5),lwd=2,col=&quot;blue&quot;,add=TRUE) legend(&#39;topright&#39;,legend = c(&quot;rate = 1&quot;,&quot;rate = 0.5&quot;,&quot;rate = 1.5&quot;), lty=1, lwd=2,col=c(&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;), bty=&#39;n&#39;, cex=1) 2.4 Raster function if(!require(raster)) install.packages(&quot;raster&quot;) ## Loading required package: raster ## Loading required package: sp ## ## Attaching package: &#39;raster&#39; ## The following objects are masked from &#39;package:MASS&#39;: ## ## area, select library(raster) ras &lt;- raster(nrows=10,ncols=10,xmn=0,xmx=10,ymn=0,ymx=10) ras ## class : RasterLayer ## dimensions : 10, 10, 100 (nrow, ncol, ncell) ## resolution : 1, 1 (x, y) ## extent : 0, 10, 0, 10 (xmin, xmax, ymin, ymax) ## coord. ref. : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 ras[] &lt;- runif(ncell(ras)) plot(ras) hist(ras) cellStats(ras,&quot;mean&quot;) ## [1] 0.4794761 ras[1,1] &lt;- 0 ras[ras &gt; 0.5] &lt;- 1 ras2 &lt;- ras + ras * 10 plot(ras2) writeRaster(ras2,filename = &quot;output/test.tif&quot;,overwrite=TRUE) "],
["inferential-statistics.html", "3 Inferential Statistics 3.1 Generating random samples 3.2 Sampling distribution of the mean 3.3 Confidence interval for the mean 3.4 Using mvrnorm function 3.5 Finding Confidence Interval 3.6 One-sample t-test 3.7 Two-sample t-test 3.8 Student’s t distribution 3.9 Testing a sample proportion 3.10 Two-sample proportion test 3.11 Online equation editor 3.12 Getting started with equations", " 3 Inferential Statistics You can download the original R notebook document for this page HERE. 3.1 Generating random samples Suppose that we interview 500 students on campus, and the results show that the average student spends about 100 minutes each day preparing for classes with a standard deviation of 10 minutes. n &lt;- 500 time.mean &lt;- 100 time.sd &lt;- 10 student &lt;- rnorm(n,mean = time.mean,sd=time.sd) hist(student,breaks = 10,xlab=&quot;Time spent daily (minutes)&quot;) print(mean(student)) ## [1] 99.50537 print(sd(student)) ## [1] 10.18846 3.2 Sampling distribution of the mean What if we repeat the interview many times, e.g., 300 times? n &lt;- 5000 m &lt;- 300 time.mean &lt;- 100 time.sd &lt;- 10 v &lt;- vector() for(i in 1:m) { x &lt;- rnorm(n,time.mean,time.sd) avg &lt;- mean(x) std &lt;- sd(x) v &lt;- c(v,avg) # print(avg) # print(std/sqrt(n)) } hist(v,breaks = 15,freq = FALSE,xlab=&quot;Sample mean (minutes)&quot;) curve(dnorm(x,mean(v),sd(v)),from = 95,to = 105,add = TRUE,n = 200,col=&quot;red&quot;) mean(v) ## [1] 99.99084 sd(v) ## [1] 0.141565 3.3 Confidence interval for the mean q90 &lt;- qnorm(0.95) # 90% confidence interval curve(dnorm,from = -3,to = 3,main=&quot;90% confidence interval&quot;) x &lt;- c(-q90,seq(-q90,q90,by = 0.01),q90) y &lt;- c(0,dnorm(seq(-q90,q90,by = 0.01)),0) polygon(x,y,col=&quot;red&quot;) qnorm(0.95) = 1.64 q95 &lt;- qnorm(0.975) # 95% confidence interval curve(dnorm,from = -3,to = 3,main=&quot;95% confidence interval&quot;) x &lt;- c(-q95,seq(-q95,q95,by = 0.01),q95) y &lt;- c(0,dnorm(seq(-q95,q95,by = 0.01)),0) polygon(x,y,col=&quot;green&quot;) qnorm(0.975) = 1.96 q99 &lt;- qnorm(0.995) # 99% confidence interval curve(dnorm,from = -3,to = 3,main=&quot;99% confidence interval&quot;) x &lt;- c(-q99,seq(-q99,q99,by = 0.01),q99) y &lt;- c(0,dnorm(seq(-q99,q99,by = 0.01)),0) polygon(x,y,col=&quot;blue&quot;) qnorm(0.995) = 2.58 Suppose that we interview 500 students on campus, and the results show that the average student spends about 100 minutes each day preparing for classes with a standard deviation of 10 minutes. Find 90%, 95%, and 99% confidence intervals. q90 &lt;- qnorm(0.950) # 90% confidence interval round(q90,2) ## [1] 1.64 q95 &lt;- qnorm(0.975) # 95% confidence interval round(q95,2) ## [1] 1.96 q99 &lt;- qnorm(0.995) # 99% confidence interval round(q99,2) ## [1] 2.58 std.err &lt;- 10/sqrt(500) conf.90 &lt;- c(100-q90*std.err,100+q90*std.err) #[99.26, 100.74] round(conf.90,2) ## [1] 99.26 100.74 conf.95 &lt;- c(100-q95*std.err,100+q95*std.err) #[99.12, 100.88] round(conf.95,2) ## [1] 99.12 100.88 conf.99 &lt;- c(100-q99*std.err,100+q99*std.err) #[98.85, 101.15] round(conf.99,2) ## [1] 98.85 101.15 3.4 Using mvrnorm function How to generate random samples from the specified normal distribution with the exact mean and standard deviation? library(MASS) x &lt;- mvrnorm(n = 500,mu = 100,Sigma = 100,empirical = TRUE) mean(x) ## [1] 100 sd(x) ## [1] 10 3.5 Finding Confidence Interval 3.5.1 Problem You have a sample from a population. Given that sample, you want to determine a confidence interval for the population’s mean. 3.5.2 Solution Apply the t.test function to your sample x: t.test(x) The output includes a confidence interval at the 95% confidence level. To see intervals at other levels, use the conf.level argument. 3.5.3 Example library(MASS) x &lt;- mvrnorm(n = 500,mu = 100,Sigma = 100,empirical = TRUE) t.test(x,conf.level = 0.90) #[99.26, 100.74] ## ## One Sample t-test ## ## data: x ## t = 223.61, df = 499, p-value &lt; 2.2e-16 ## alternative hypothesis: true mean is not equal to 0 ## 90 percent confidence interval: ## 99.26303 100.73697 ## sample estimates: ## mean of x ## 100 t.test(x,conf.level = 0.95) #[99.12, 100.88] ## ## One Sample t-test ## ## data: x ## t = 223.61, df = 499, p-value &lt; 2.2e-16 ## alternative hypothesis: true mean is not equal to 0 ## 95 percent confidence interval: ## 99.12135 100.87865 ## sample estimates: ## mean of x ## 100 t.test(x,conf.level = 0.99) #[98.84, 101.16] ## ## One Sample t-test ## ## data: x ## t = 223.61, df = 499, p-value &lt; 2.2e-16 ## alternative hypothesis: true mean is not equal to 0 ## 99 percent confidence interval: ## 98.84363 101.15637 ## sample estimates: ## mean of x ## 100 3.6 One-sample t-test 3.6.1 Problem Suppose that we interview 50 students on campus, and the results show that the average student spends about 99 minutes each day preparing for classes with a standard deviation of 10 minutes. Null hypothesis \\(H_o:\\mu = 100\\) Alternative hypothesis \\(H_{\\alpha}:\\mu \\neq 100\\) 3.6.2 Example library(MASS) x &lt;- mvrnorm(n = 500,mu = 99,Sigma = 100,empirical = TRUE) result &lt;- t.test(x,mu = 100) result ## ## One Sample t-test ## ## data: x ## t = -2.2361, df = 499, p-value = 0.02579 ## alternative hypothesis: true mean is not equal to 100 ## 95 percent confidence interval: ## 98.12135 99.87865 ## sample estimates: ## mean of x ## 99 if(result$p.value&gt;0.05){ print(&quot;We cannot reject the null hypothesis&quot;) } else { print(&quot;We reject the null hypothesis&quot;)} ## [1] &quot;We reject the null hypothesis&quot; 3.7 Two-sample t-test 3.7.1 Problem Suppose that we interview 50 students on campus, and the results show that the average student spends about 99 minutes each day preparing for classes with a standard deviation of 10 minutes. Suppose that we interview another 50 students on campus, and the results show that the average student spends about 98 minutes each day preparing for classes with a standard deviation of 5 minutes. Null hypothesis \\(H_o: \\mu_1 = \\mu_2\\) Alternative hypothesis \\(H_a: \\mu_1 \\neq \\mu_2\\) 3.7.2 Example library(MASS) x1 &lt;- mvrnorm(n = 50,mu = 99,Sigma = 100,empirical = TRUE) x2 &lt;- mvrnorm(n = 50,mu = 98,Sigma = 25,empirical = TRUE) result &lt;- t.test(x1,x2) result ## ## Welch Two Sample t-test ## ## data: x1 and x2 ## t = 0.63246, df = 72.059, p-value = 0.5291 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -2.151899 4.151899 ## sample estimates: ## mean of x mean of y ## 99 98 if(result$p.value&gt;0.05){ print(&quot;We cannot reject the null hypothesis&quot;) } else { print(&quot;We reject the null hypothesis&quot;)} ## [1] &quot;We cannot reject the null hypothesis&quot; 3.8 Student’s t distribution 3.8.1 Solution dt(x, df) pt(q, df,lower.tail = TRUE) qt(p, df,lower.tail = TRUE) rt(n, df) 3.8.2 Example qnorm(0.95) ## [1] 1.644854 qnorm(0.975) ## [1] 1.959964 qnorm(0.995) ## [1] 2.575829 qt(0.95,df = 10) ## [1] 1.812461 qt(0.975,df = 10) ## [1] 2.228139 qt(0.995,df = 10) ## [1] 3.169273 curve(dt(x,df = 1),from = -5,to = 5,ylim = c(0,0.4),col = &quot;red&quot;) curve(dt(x,df = 2),from = -5,to = 5,col = &quot;green&quot;,add=TRUE) curve(dt(x,df = 5),from = -5,to = 5,col = &quot;blue&quot;,add = TRUE) curve(dnorm,add=TRUE,col =&quot;black&quot;,lwd=2) 3.9 Testing a sample proportion 3.9.1 Problem We want to test the hypothesis that more than 30% of U.S. households have internet access (with a significance level of 5%). We collect a sample of 150 households and find that 57 have access. 3.9.2 Solution result &lt;- prop.test(57,n = 150,p = 0.3,alternative = &quot;greater&quot;) result ## ## 1-sample proportions test with continuity correction ## ## data: 57 out of 150, null probability 0.3 ## X-squared = 4.1984, df = 1, p-value = 0.02023 ## alternative hypothesis: true p is greater than 0.3 ## 95 percent confidence interval: ## 0.3143179 1.0000000 ## sample estimates: ## p ## 0.38 if(result$p.value&gt;0.05) { print(&quot;We cannot reject the null hypothesis &quot;) } else { print(&quot;We accept the alternative hypothesis&quot;) } ## [1] &quot;We accept the alternative hypothesis&quot; 3.10 Two-sample proportion test 3.10.1 Problem A random sample of 428 adults from New York City reveals 128 smokers. A random sample of 682 adults from San Francisco reveals 170 smokers. Is the proportion of adult smokers in New York City different from that in San Francisco? 3.10.2 Solution result &lt;- prop.test(x=c(128,170), n=c(428,682)) result ## ## 2-sample test for equality of proportions with continuity ## correction ## ## data: c(128, 170) out of c(428, 682) ## X-squared = 3.0718, df = 1, p-value = 0.07966 ## alternative hypothesis: two.sided ## 95 percent confidence interval: ## -0.006283211 0.105880328 ## sample estimates: ## prop 1 prop 2 ## 0.2990654 0.2492669 if(result$p.value&gt;0.05) { print(&quot;We cannot reject the null hypothesis &quot;) } else { print(&quot;We accept the alternative hypothesis&quot;) } ## [1] &quot;We cannot reject the null hypothesis &quot; 3.11 Online equation editor https://www.codecogs.com/latex/eqneditor.php http://rogercortesi.com/eqn/ 3.12 Getting started with equations We can write fractions: \\(\\frac{2}{3}\\). We can also handle things like estimated population growth rate, e.g., \\(\\hat{\\lambda}=1.02\\). And, \\(\\sqrt{4}=2\\). \\[\\alpha, \\beta, \\gamma, \\Gamma\\] \\[a \\pm b\\] \\[x \\ge 15\\] \\[a_i \\ge 0~~~\\forall i\\] 3.12.1 Matrix \\[A_{m,n} = \\begin{pmatrix} a_{1,1} &amp; a_{1,2} &amp; \\cdots &amp; a_{1,n} \\\\ a_{2,1} &amp; a_{2,2} &amp; \\cdots &amp; a_{2,n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m,1} &amp; a_{m,2} &amp; \\cdots &amp; a_{m,n} \\end{pmatrix}\\] 3.12.2 Statistics The binomial probability: \\[f(y|N,p) = \\frac{N!}{y!(N-y)!}\\cdot p^y \\cdot (1-p)^{N-y} = {{N}\\choose{y}} \\cdot p^y \\cdot (1-p)^{N-y}\\] To calculate the mean of observations of variable , you can use: \\[\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n}x_{i}\\] Note that this equation looks quite nice above where it’s in display math mode. It is more compact but not quite as nice looking if we present it using inline mode, e.g., \\(\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n}x_{i}\\). Let’s do the same with the equation for variance. First the inline version, which is \\(\\sigma^{2} = \\frac{\\sum\\limits_{i=1}^{n} \\left(x_{i} - \\bar{x}\\right)^{2}} {n-1}\\). And then the display mode version: \\[\\sigma^{2} = \\frac{\\sum_{i=1}^{n} \\left(x_{i} - \\bar{x}\\right)^{2}} {n-1}\\] And, finally, we’ll end with the standard deviation. Here’s the inline version, \\(\\sigma = \\sqrt{\\frac{\\sum\\limits_{i=1}^{n} \\left(x_{i} - \\bar{x}\\right)^{2}} {n-1}}\\). And here’s the display version. \\[\\sigma = \\sqrt{\\frac{\\sum\\limits_{i=1}^{n} \\left(x_{i} - \\bar{x}\\right)^{2}} {n-1}}\\] "],
["analysis-of-variance.html", "4 Analysis of Variance 4.1 Hypothesis Testing 4.2 Testing for Normality 4.3 Testing for Homogeneity 4.4 Kruskal-Wallis Test 4.5 Chi-squared Distribution 4.6 F Distribution", " 4 Analysis of Variance Analysis of variance (ANOVA) 4.1 Hypothesis Testing 4.1.1 Problem Test whether employees experience different levels of stress under normal, announced layoff, and during layoff. 4.1.2 Solution A &lt;- c(2,3,7,2,6) B &lt;- c(10,8,7,5,10) C &lt;- c(10,13,14,13,15) stress &lt;- c(A,B,C) group &lt;- c(rep(&quot;A&quot;,5),rep(&quot;B&quot;,5),rep(&quot;C&quot;,5)) df &lt;- data.frame(stress,group) m &lt;- aov(stress~group,data = df) m ## Call: ## aov(formula = stress ~ group, data = df) ## ## Terms: ## group Residuals ## Sum of Squares 203.3333 54.0000 ## Deg. of Freedom 2 12 ## ## Residual standard error: 2.12132 ## Estimated effects may be unbalanced summary(m) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## group 2 203.3 101.7 22.59 8.54e-05 *** ## Residuals 12 54.0 4.5 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 TukeyHSD(m) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = stress ~ group, data = df) ## ## $group ## diff lwr upr p adj ## B-A 4 0.4206853 7.579315 0.0286585 ## C-A 9 5.4206853 12.579315 0.0000598 ## C-B 5 1.4206853 8.579315 0.0075279 plot(TukeyHSD(m)) qf(0.95,df1 = 2,df2 = 12) ## [1] 3.885294 pf(22.59,df1=2,df2=12,lower.tail = FALSE) ## [1] 8.543239e-05 s &lt;- oneway.test(stress~group,data = df,var.equal = TRUE) s ## ## One-way analysis of means ## ## data: stress and group ## F = 22.593, num df = 2, denom df = 12, p-value = 8.539e-05 summary(s) ## Length Class Mode ## statistic 1 -none- numeric ## parameter 2 -none- numeric ## p.value 1 -none- numeric ## method 1 -none- character ## data.name 1 -none- character str(s) ## List of 5 ## $ statistic: Named num 22.6 ## ..- attr(*, &quot;names&quot;)= chr &quot;F&quot; ## $ parameter: Named num [1:2] 2 12 ## ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;num df&quot; &quot;denom df&quot; ## $ p.value : num 8.54e-05 ## $ method : chr &quot;One-way analysis of means&quot; ## $ data.name: chr &quot;stress and group&quot; ## - attr(*, &quot;class&quot;)= chr &quot;htest&quot; 4.2 Testing for Normality 4.2.1 Problem You want a statistical test to determine whether your data sample is from a normally distributed population. 4.2.2 Solution Use the shapiro.test function: shapiro.test(x) The output includes a p-value. Conventionally, p &lt; 0.05 indicates that the population is likely not normally distributed whereas p &gt; 0.05 provides no such evidence. x1 &lt;- rnorm(n = 1000) hist(x1) shapiro.test(x1) ## ## Shapiro-Wilk normality test ## ## data: x1 ## W = 0.99858, p-value = 0.6096 x2 &lt;- rt(1000,df = 5) hist(x2) shapiro.test(x2) ## ## Shapiro-Wilk normality test ## ## data: x2 ## W = 0.97218, p-value = 6.473e-13 x3 &lt;- runif(1000) hist(x3) shapiro.test(x3) ## ## Shapiro-Wilk normality test ## ## data: x3 ## W = 0.9564, p-value &lt; 2.2e-16 4.3 Testing for Homogeneity 4.3.1 Problem The population variances are assumed equal for each category (leveneTest() in car package) 4.3.2 Solution Sample data with homogeneity #Load packages library(reshape2) library(car) #Creating example data sample1 &lt;- rnorm(20) sample2 &lt;- rnorm(20) #Combine data sample &lt;- as.data.frame(cbind(sample1, sample2)) #Melt data dataset &lt;- melt(sample) ## No id variables; using all as measure variables library(knitr) kable(dataset) variable value sample1 -0.7323438 sample1 -0.8769356 sample1 -0.3220532 sample1 -0.1090370 sample1 0.4619248 sample1 1.7343764 sample1 0.6467355 sample1 0.1372610 sample1 0.7964171 sample1 0.3915450 sample1 1.4773767 sample1 -0.4684362 sample1 1.3560134 sample1 0.9284612 sample1 0.2931870 sample1 -0.4429722 sample1 -0.2099631 sample1 0.5829327 sample1 -0.2891349 sample1 0.4960742 sample2 -1.5744385 sample2 0.4692314 sample2 -0.6169788 sample2 1.2825795 sample2 1.0747879 sample2 0.0379773 sample2 1.2982679 sample2 1.1165690 sample2 0.9099767 sample2 0.1942303 sample2 0.3720209 sample2 0.4728767 sample2 -1.3008057 sample2 0.6372915 sample2 -0.2607134 sample2 -0.9039969 sample2 1.0716720 sample2 0.0608792 sample2 0.8697348 sample2 -1.0424024 #Compute test leveneTest(value ~ variable, dataset) ## Levene&#39;s Test for Homogeneity of Variance (center = median) ## Df F value Pr(&gt;F) ## group 1 0.571 0.4545 ## 38 Sample data without homogeneity #Load packages library(reshape2) library(car) #Creating example data sample1 &lt;- rnorm(20) sample2 &lt;- rnorm(20,mean = 100,sd = 10) #Combine data sample &lt;- as.data.frame(cbind(sample1, sample2)) #Melt data dataset &lt;- melt(sample) ## No id variables; using all as measure variables library(knitr) kable(dataset) variable value sample1 0.5607869 sample1 -0.6210257 sample1 -0.5776208 sample1 2.0505180 sample1 2.9380507 sample1 -1.0606861 sample1 0.5125207 sample1 -1.1021915 sample1 0.1482437 sample1 0.9991437 sample1 0.2691766 sample1 0.4971709 sample1 0.1216224 sample1 -0.9970868 sample1 -1.3107840 sample1 -0.4868515 sample1 -1.2382844 sample1 1.0007721 sample1 0.9208793 sample1 -0.0926558 sample2 103.7357442 sample2 98.4326393 sample2 95.8065096 sample2 97.1655569 sample2 95.5437524 sample2 100.1936548 sample2 102.9927656 sample2 105.0621017 sample2 109.7167045 sample2 101.5971692 sample2 103.5414275 sample2 98.8358022 sample2 98.3721011 sample2 85.0360587 sample2 102.4202034 sample2 100.6305104 sample2 93.5154516 sample2 90.8655613 sample2 110.0463412 sample2 91.3013447 #Compute test leveneTest(value ~ variable, dataset) ## Levene&#39;s Test for Homogeneity of Variance (center = median) ## Df F value Pr(&gt;F) ## group 1 19.872 7.104e-05 *** ## 38 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 4.4 Kruskal-Wallis Test 4.4.1 Problem If the data deviate drastically from the assumptions, or if the p-value is close to \\(\\alpha\\), then an alternative test that does not rely on the assumptions might be considered. Tests that do not make assumptions regarding how the underlying data are distributed are called nonparametric tests. The nonparametric test for testing the equality of means for two or more categories is the Kruskal–Wallis test. There is another set of circumstances for which the Kruskal–Wallis test is useful for testing hypotheses about a set of means – namely when only ranked (i.e., ordinal) data are available. In such situations, there is insufficient information to use ANOVA, which requires interval or ratio level data. (Recall that with interval and ratio data the magnitude of the difference between the observations is meaningful.) 4.4.2 Solution For example, we want to know if the air quality vaires significantly by month? library(graphics) df &lt;- airquality boxplot(Ozone ~ Month, data = df) kruskal.test(Ozone ~ Month, data = df) ## ## Kruskal-Wallis rank sum test ## ## data: Ozone by Month ## Kruskal-Wallis chi-squared = 29.267, df = 4, p-value = 6.901e-06 4.5 Chi-squared Distribution 4.5.1 Definition If \\(X_{1},X_{2},…,X_{m}\\) are \\(m\\) independent random variables having the standard normal distribution, then the following quantity follows a Chi-Squared distribution with \\(m\\) degrees of freedom. Its mean is \\(m\\), and its variance is \\(2m\\). 4.5.2 Solution x &lt;- rnorm(1000) hist(x) x2 &lt;- x^2 hist(x2) curve(dchisq(x,df=7),from = 0,to = 20) qchisq(.95, df=7) # 7 degrees of freedom ## [1] 14.06714 4.6 F Distribution 4.6.1 Definition If \\(V_1\\) and \\(V_2\\) are two independent random variables having the Chi-Squared distribution with \\(m_1\\) and \\(m_2\\) degrees of freedom respectively, then the following quantity follows an F distribution with \\(m_1\\) numerator degrees of freedom and \\(m_2\\) denominator degrees of freedom, i.e.,\\((m_1,m_2)\\) degrees of freedom. 4.6.2 Problem Find the 95th percentile of the F distribution with (5, 2) degrees of freedom. 4.6.3 Solution curve(df(x,df1 = 5,df2 = 2),from = 0,to = 5) qf(.95, df1=5, df2=2) ## [1] 19.29641 "],
["correlation.html", "5 Correlation 5.1 Pearson’s correlation 5.2 Significance test 5.3 Correlation and sample size 5.4 Spearman’s correlation", " 5 Correlation 5.1 Pearson’s correlation \\[r=\\frac{\\sum_{n}^{i=1}(x_i-\\bar{x})(y_i-\\bar{y})}{(n-1)s_{x}s_{y}}\\] 5.1.1 Problem Anxiety and exam performance Participants: 103 students Measures Exam performance (%) Exam Anxiety (the EAQ, score out of 100) Time spent revising (hours) 5.1.2 Solution url &lt;- &quot;http://spatial.binghamton.edu/geog533/data/ExamAnxiety.csv&quot; examData &lt;- read.csv(url,header = TRUE) library(knitr) ## display first 10 rows kable(head(examData,n = 10)) Exam Anxiety Revise 40 86.298 4 65 88.716 11 80 70.178 27 80 61.312 53 40 89.522 4 70 60.506 22 20 81.462 16 55 75.820 21 50 69.372 25 40 82.268 18 plot(examData$Anxiety,examData$Exam,xlab = &quot;Anxiety&quot;,ylab = &quot;Exam Score&quot;) #abline(lm(examData$Exam~examData$Anxiety)) cor(examData,use = &quot;complete.obs&quot;,method = &quot;pearson&quot;) ## Exam Anxiety Revise ## Exam 1.0000000 -0.4409934 0.3967207 ## Anxiety -0.4409934 1.0000000 -0.7092493 ## Revise 0.3967207 -0.7092493 1.0000000 cor.test(examData$Exam,examData$Anxiety,method = &quot;pearson&quot;) ## ## Pearson&#39;s product-moment correlation ## ## data: examData$Exam and examData$Anxiety ## t = -4.938, df = 101, p-value = 3.128e-06 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.5846244 -0.2705591 ## sample estimates: ## cor ## -0.4409934 alternative indicates the alternative hypothesis and must be one of “two.sided”, “greater” or “less”. You can specify just the initial letter. “greater” corresponds to positive association, “less” to negative association. cor.test(examData$Exam, examData$Anxiety, alternative = &quot;less&quot;, method = &quot;pearson&quot;) ## ## Pearson&#39;s product-moment correlation ## ## data: examData$Exam and examData$Anxiety ## t = -4.938, df = 101, p-value = 1.564e-06 ## alternative hypothesis: true correlation is less than 0 ## 95 percent confidence interval: ## -1.0000000 -0.2995071 ## sample estimates: ## cor ## -0.4409934 5.2 Significance test To test the null hypothesis that the true correlation coefficient, \\(\\rho\\), is equal to zero, the data for each variable are assumed to come from normal distributions. \\[t=\\frac{r\\sqrt{n-2}}{\\sqrt{1-r^2}} \\] If the null hypothesis is true, this statistic has a t-distribution, with n – 2 degrees of freedom. result &lt;- cor.test(examData$Exam, examData$Anxiety, alternative = &quot;less&quot;, method = &quot;pearson&quot;) str(result) ## List of 9 ## $ statistic : Named num -4.94 ## ..- attr(*, &quot;names&quot;)= chr &quot;t&quot; ## $ parameter : Named int 101 ## ..- attr(*, &quot;names&quot;)= chr &quot;df&quot; ## $ p.value : num 1.56e-06 ## $ estimate : Named num -0.441 ## ..- attr(*, &quot;names&quot;)= chr &quot;cor&quot; ## $ null.value : Named num 0 ## ..- attr(*, &quot;names&quot;)= chr &quot;correlation&quot; ## $ alternative: chr &quot;less&quot; ## $ method : chr &quot;Pearson&#39;s product-moment correlation&quot; ## $ data.name : chr &quot;examData$Exam and examData$Anxiety&quot; ## $ conf.int : atomic [1:2] -1 -0.3 ## ..- attr(*, &quot;conf.level&quot;)= num 0.95 ## - attr(*, &quot;class&quot;)= chr &quot;htest&quot; r &lt;- result$estimate n &lt;- nrow(examData) t &lt;- r*sqrt(n-2)/sqrt(1-r^2) t ## cor ## -4.938025 pt(t,df = n-2) ## cor ## 1.563936e-06 curve(dt(x,df = n-2),from = -6,to = 6) t.critical &lt;- qt(0.025,df = n-2) t.critical ## [1] -1.983731 points(t.critical,dt(t.critical,df = n-2),pch=16,col=&quot;red&quot;) points(t,dt(t,df = n-2),pch=16,col=&quot;blue&quot;) 5.3 Correlation and sample size An extremely important point is that the correlation coefficient is influenced by sample size. It is far easier to reject the null hypothesis that \\(\\rho=0\\) with a large sample size than it is with a small sample size. For large sample size, critial t value is approximately \\(2/\\sqrt{n}\\) n &lt;- c(10,15,20,30,50,100,250,500,1000) r &lt;- round(2/sqrt(n),3) df &lt;- data.frame(n,r) names(df) &lt;- c(&quot;Sample size&quot;, &quot;Minimum absolute value of r needed to attain significance&quot;) library(knitr) kable(df) Sample size Minimum absolute value of r needed to attain significance 10 0.632 15 0.516 20 0.447 30 0.365 50 0.283 100 0.200 250 0.126 500 0.089 1000 0.063 5.4 Spearman’s correlation Spearman’s rho Pearson’s correlation on the ranked data \\[r_{S} = 1 - \\frac{6\\sum_{i=1}^{n}d_{i}^{2}}{n^3-n}\\] 5.4.1 Problem World’s Biggest Liar competition 68 contestants Measures Where they were placed in the competition (first, second, third, etc.) Creativity questionnaire (maximum score 60) 5.4.2 Solution url &lt;- &quot;http://spatial.binghamton.edu/geog533/data/TheBiggestLiar.csv&quot; liarData &lt;- read.csv(url,header = TRUE) library(knitr) ## display first ten rows kable(head(liarData,n = 10)) Creativity Position Novice 53 1 0 36 3 1 31 4 0 43 2 0 30 4 1 41 1 0 32 4 0 54 1 1 47 2 1 50 2 0 plot(liarData$Creativity,liarData$Position) cor(liarData$Position, liarData$Creativity, method = &quot;spearman&quot;) ## [1] -0.3732184 cor.test(liarData$Position, liarData$Creativity, alternative = &quot;less&quot;, method = &quot;spearman&quot;) ## Warning in cor.test.default(liarData$Position, liarData$Creativity, ## alternative = &quot;less&quot;, : Cannot compute exact p-value with ties ## ## Spearman&#39;s rank correlation rho ## ## data: liarData$Position and liarData$Creativity ## S = 71948, p-value = 0.0008602 ## alternative hypothesis: true rho is less than 0 ## sample estimates: ## rho ## -0.3732184 "],
["bivariate-regression.html", "6 Bivariate Regression 6.1 Example 1 6.2 Example 2 6.3 Example 3", " 6 Bivariate Regression 6.1 Example 1 6.1.1 Problem A record company boss was interested in predicting record sales from advertising. Data: 200 different album releases Outcome variable: Sales (CDs and downloads) in the week after release Predictor variable: The amount (in units of $1000) spent promoting the record before release. 6.1.2 Solutioin url &lt;- &quot;http://spatial.binghamton.edu/geog533/data/AlbumSales1.csv&quot; df &lt;- read.csv(url,header = TRUE) library(knitr) kable(head(df,n = 10)) adverts sales 10.256 330 985.685 120 1445.563 360 1188.193 270 574.513 220 568.954 170 471.814 70 537.352 210 514.068 200 174.093 300 plot(df) m &lt;- lm(df$sales ~ df$adverts) m ## ## Call: ## lm(formula = df$sales ~ df$adverts) ## ## Coefficients: ## (Intercept) df$adverts ## 134.13994 0.09612 m &lt;- lm(sales ~ adverts, data = df) summary(m) ## ## Call: ## lm(formula = sales ~ adverts, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -152.949 -43.796 -0.393 37.040 211.866 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.341e+02 7.537e+00 17.799 &lt;2e-16 *** ## adverts 9.612e-02 9.632e-03 9.979 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 65.99 on 198 degrees of freedom ## Multiple R-squared: 0.3346, Adjusted R-squared: 0.3313 ## F-statistic: 99.59 on 1 and 198 DF, p-value: &lt; 2.2e-16 abline(m,col=&quot;red&quot;,lwd=2) attributes(m) ## $names ## [1] &quot;coefficients&quot; &quot;residuals&quot; &quot;effects&quot; &quot;rank&quot; ## [5] &quot;fitted.values&quot; &quot;assign&quot; &quot;qr&quot; &quot;df.residual&quot; ## [9] &quot;xlevels&quot; &quot;call&quot; &quot;terms&quot; &quot;model&quot; ## ## $class ## [1] &quot;lm&quot; The equation is: \\(sales = a + b\\times adverts = 134.1399 + 0.0961 \\times adverts\\) 6.2 Example 2 Speed and Stopping Distances of Cars df &lt;- cars library(knitr) kable(head(df,n = 10)) speed dist 4 2 4 10 7 4 7 22 8 16 9 10 10 18 10 26 10 34 11 17 plot(df) x &lt;- cars$speed y &lt;- cars$dist plot(y ~ x) m &lt;- lm(y~x) m ## ## Call: ## lm(formula = y ~ x) ## ## Coefficients: ## (Intercept) x ## -17.579 3.932 summary(m) ## ## Call: ## lm(formula = y ~ x) ## ## Residuals: ## Min 1Q Median 3Q Max ## -29.069 -9.525 -2.272 9.215 43.201 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -17.5791 6.7584 -2.601 0.0123 * ## x 3.9324 0.4155 9.464 1.49e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 15.38 on 48 degrees of freedom ## Multiple R-squared: 0.6511, Adjusted R-squared: 0.6438 ## F-statistic: 89.57 on 1 and 48 DF, p-value: 1.49e-12 abline(m,col=&quot;red&quot;,lwd=2) segments(x,fitted(m),x,y,col=&quot;blue&quot;,lty = &quot;dashed&quot;) result &lt;- cor.test(x,y,method = &quot;pearson&quot;) result ## ## Pearson&#39;s product-moment correlation ## ## data: x and y ## t = 9.464, df = 48, p-value = 1.49e-12 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.6816422 0.8862036 ## sample estimates: ## cor ## 0.8068949 r &lt;- result$estimate r2 &lt;- r^2 round(r2,4) ## cor ## 0.6511 p=1 n=nrow(df) adjusted.r2 &lt;- r2-(1-r2)*p/(n-p-1) round(adjusted.r2,4) ## cor ## 0.6438 Make predictions based on new inputs: df &lt;- cars m &lt;- lm(dist~speed,data = df) n &lt;- nrow(df) df$x &lt;- sample(10:100,size = n) df$y &lt;- predict(m,newdata = data.frame(speed=df$x)) library(knitr) kable(head(df,n = 10)) speed dist x y 4 2 21 65.00149 4 10 48 171.17653 7 4 66 241.95988 7 22 11 25.67740 8 16 46 163.31171 9 10 74 273.41915 10 18 26 84.66353 10 26 94 352.06733 10 34 69 253.75711 11 17 75 277.35156 plot(df$x,df$y) abline(m,col=&quot;red&quot;) 6.3 Example 3 x &lt;- c(65,35,30,44,80,77,32,39,44,77) y &lt;- c(120,68,35,60,100,91,44,71,89,113) library(knitr) kable(cbind(y,x)) y x 120 65 68 35 35 30 60 44 100 80 91 77 44 32 71 39 89 44 113 77 n &lt;- length(x) mx &lt;- mean(x) my &lt;- mean(y) sx &lt;- sd(x) sy &lt;- sd(y) numerator &lt;- sum((x-mx)*(y-my)) numerator ## [1] 4301.7 denominator &lt;- sum((x-mx)^2) denominator ## [1] 3672.1 slope &lt;- numerator / denominator slope ## [1] 1.171455 intercept &lt;- my - slope * mx intercept ## [1] 17.8329 m &lt;- lm(y~x) summary(m) ## ## Call: ## lm(formula = y ~ x) ## ## Residuals: ## Min 1Q Median 3Q Max ## -17.977 -11.492 -2.206 8.745 26.023 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 17.833 15.207 1.173 0.27466 ## x 1.171 0.273 4.291 0.00265 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 16.54 on 8 degrees of freedom ## Multiple R-squared: 0.6971, Adjusted R-squared: 0.6592 ## F-statistic: 18.41 on 1 and 8 DF, p-value: 0.002648 MSS &lt;- sum((fitted(m) - my)^2) MSS ## [1] 5039.248 RSS &lt;- sum((y - fitted(m))^2) RSS ## [1] 2189.652 TSS &lt;- RSS + MSS TSS ## [1] 7228.9 df1 &lt;- 1 df2 &lt;- n-2 df3 &lt;- df1+df2 msq1 &lt;- MSS / df1 msq2 &lt;- RSS / df2 F.value &lt;- msq1 / msq2 F.value ## [1] 18.41114 F.critical &lt;- qf(0.95,df1 = 1,df2 = n-2) F.critical ## [1] 5.317655 rsq &lt;- MSS / TSS rsq ## [1] 0.6970975 if(F.value&gt;F.critical){ print(&quot;We reject the null hypothesis&quot;) } else { print(&quot;We cannot reject the null hypothesis&quot;) } ## [1] &quot;We reject the null hypothesis&quot; Sum of squares df Mean square F Regression 5039.25 1 5039.25 18.41 Residual 2189.65 8 273.71 Total 7228.9 9 "],
["web-mapping.html", "7 Web Mapping 7.1 Useful websites 7.2 Leaflet 7.3 Dygraphs", " 7 Web Mapping 7.1 Useful websites htmlwidget for R Leaflet for R Leaflet basemap Leaflet Application 1 Leaflet Application 2 7.2 Leaflet 7.2.1 Installation To install this R package, run this command at your R prompt: if(!require(leaflet)) install.packages(&quot;leaflet&quot;) Once installed, you can use this package at the R console, within R Markdown documents. 7.2.2 Basic Usage You create a Leaflet map with these basic steps: Create a map widget by calling leaflet(). Add layers (i.e., features) to the map by using layer functions (e.g. addTiles, addMarkers, addPolygons) to modify the map widget. Repeat step 2 as desired. Print the map widget to display it. Here’s a basic example: m &lt;- leaflet() m &lt;- addTiles(m) # Add default OpenStreetMap map tiles m &lt;- addMarkers(m, lng=-75.968342, lat=42.089026, popup=&quot;Binghamton University&quot;) m # Print the map 7.2.3 Pipe operator m &lt;- leaflet() %&gt;% addTiles() %&gt;% addMarkers(m, lng=-75.968342, lat=42.089026, popup=&quot;Binghamton University&quot;) m 7.2.4 Basemaps The easiest way to add tiles is by calling addTiles() with no arguments; by default, OpenStreetMap tiles are used. Alternatively, many popular free third-party basemaps can be added using the addProviderTiles() function, which is implemented using the leaflet-providers plugin. See here for the complete set. m &lt;- leaflet() %&gt;% addTiles() %&gt;% addProviderTiles(provider = &quot;Esri.WorldStreetMap&quot;,group = &quot;World StreetMap&quot;) %&gt;% addProviderTiles(provider = &quot;Esri.WorldImagery&quot;,group = &quot;World Imagery&quot;) %&gt;% addProviderTiles(provider = &quot;NASAGIBS.ViirsEarthAtNight2012&quot;,group = &quot;Nighttime Imagery&quot;) %&gt;% addMarkers(m, lng=-75.968342, lat=42.089026, popup=&quot;Binghamton University&quot;) %&gt;% addLayersControl( baseGroups = c(&quot;OSM (default)&quot;,&quot;World StreetMap&quot;, &quot;World Imagery&quot;, &quot;Nighttime Imagery&quot;), options = layersControlOptions(collapsed = FALSE)) m 7.2.5 Markers Use markers to call out points on the map. Marker locations are expressed in latitude/longitude coordinates, and can either appear as icons or as circles. You can use SpatialPoints, SpatialPointsDataFrame, or a two-column numeric matrix (first column is longitude, second column is latitude) as data objects. You can also use a data frame with latitude and longitude columns. You can explicitly tell the marker function which columns contain the coorinate data (e.g. addMarker(lng = ~Longitude, lat = ~Latitude)), or let the function look for columns named lat/latitude and lon/lng/long/longitude (case insensitive). 7.2.5.1 Icon Markers Icon markers are added using the addMarker function. Their default appearance is a dropped pin. As with most layer functions, the popup argument can be used to add a message to be displayed on click. library(knitr) df &lt;- quakes kable(head(df,n = 10)) # display the first 10 records lat long depth mag stations -20.42 181.62 562 4.8 41 -20.62 181.03 650 4.2 15 -26.00 184.10 42 5.4 43 -17.97 181.66 626 4.1 19 -20.42 181.96 649 4.0 11 -19.68 184.31 195 4.0 12 -11.70 166.10 82 4.8 43 -28.11 181.93 194 4.4 15 -28.74 181.74 211 4.7 35 -17.47 179.59 622 4.3 19 leaflet(data = df) %&gt;% addTiles() %&gt;% addMarkers(~long, ~lat,popup = ~as.character(mag)) 7.2.5.2 Marker Clusters df &lt;- quakes leaflet(data = df) %&gt;% addTiles() %&gt;% addMarkers(~long, ~lat,popup = ~as.character(mag),clusterOptions = markerClusterOptions()) 7.3 Dygraphs http://rstudio.github.io/dygraphs Dygraphs provides rich facilities for charting time-series data in R and includes support for many interactive features including series/point highlighting, zooming, and panning. 7.3.1 Installation if(!require(dygraphs)) install.packages(&quot;dygraphs&quot;) ## Loading required package: dygraphs 7.3.2 Basic Usage library(dygraphs) library(knitr) df &lt;- nhtemp kable(head(df,n = 10)) ## display the first 10 records 49.9 52.3 49.4 51.1 49.4 47.9 49.8 50.9 49.3 51.9 dygraph(nhtemp, main = &quot;New Haven Temperatures&quot;) %&gt;% dyRangeSelector(dateWindow = c(&quot;1920-01-01&quot;, &quot;1960-01-01&quot;)) 7.3.3 Example http://wetlands.io/maps/PPR_NCDC.html "],
["multiple-regression.html", "8 Multiple Regression 8.1 Forumlas 8.2 Getting Regression Statistics 8.3 Multiple Regression 8.4 Categorical Predictors", " 8 Multiple Regression 8.1 Forumlas Specifiy predictors to be included in the formula: lm(formula = y ~ u + v + w) Include all predictors: lm(formula = y ~ .) Linear regression without an intercept: lm(y ~ x + 0) Linear regression with interaction terms: lm(y ~ u*v) Backward stepwise regression: full.model &lt;- lm(y ~ x1 + x2 + x3 + x4) reduced.model &lt;- step(full.model, direction=&quot;backward&quot;) Forward stepwise regression: min.model &lt;- lm(y ~ 1) fwd.model &lt;- step(min.model, direction=&quot;forward&quot;, scope=( ~ x1 + x2 + x3 + x4 )) 8.2 Getting Regression Statistics Save the regression model in a variable, say m: m &lt;- lm( y ~ u + v + w) The use functions to extract regression statistics and information from the model: anova(m): ANOVA table coefficients(m): Model coefficients coef(m): Same as coefficients(m) confint(m): Confidence intervals for the regression coefficients deviance(m): Residual sum of squares effects(m): Vector of orthogonal effects fitted(m): Vector of fitted y values residuals(m): Model residuals resid(m): Same as residuals(m) summary(m): Key statistics, such as \\(R^2\\), the \\(F\\) statistic, and the residual standard error (\\(\\alpha\\)) vcov(m): Variance–covariance matrix of the main parameters 8.3 Multiple Regression url &lt;- &quot;http://spatial.binghamton.edu/geog533/data/AlbumSales2.csv&quot; df &lt;- read.csv(url,header = TRUE) library(knitr) kable(head(df,10)) adverts sales airplay attract 10.256 330 43 10 985.685 120 28 7 1445.563 360 35 7 1188.193 270 33 7 574.513 220 44 5 568.954 170 19 5 471.814 70 20 1 537.352 210 22 9 514.068 200 21 7 174.093 300 40 7 m &lt;- lm(sales ~ adverts + airplay + attract, data = df) ## m &lt;- lm(sales ~ ., data = df) summary(m) ## ## Call: ## lm(formula = sales ~ adverts + airplay + attract, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -121.324 -28.336 -0.451 28.967 144.132 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -26.612958 17.350001 -1.534 0.127 ## adverts 0.084885 0.006923 12.261 &lt; 2e-16 *** ## airplay 3.367425 0.277771 12.123 &lt; 2e-16 *** ## attract 11.086335 2.437849 4.548 9.49e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 47.09 on 196 degrees of freedom ## Multiple R-squared: 0.6647, Adjusted R-squared: 0.6595 ## F-statistic: 129.5 on 3 and 196 DF, p-value: &lt; 2.2e-16 anova(m) ## Analysis of Variance Table ## ## Response: sales ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## adverts 1 433688 433688 195.600 &lt; 2.2e-16 *** ## airplay 1 381836 381836 172.214 &lt; 2.2e-16 *** ## attract 1 45853 45853 20.681 9.492e-06 *** ## Residuals 196 434575 2217 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 coefficients(m) ## (Intercept) adverts airplay attract ## -26.61295836 0.08488483 3.36742517 11.08633520 coef(m) ## (Intercept) adverts airplay attract ## -26.61295836 0.08488483 3.36742517 11.08633520 a &lt;- round(coef(m)[1],2) b1 &lt;- round(coef(m)[2],2) b2 &lt;- round(coef(m)[3],2) b3 &lt;- round(coef(m)[4],2) The regression equation is: \\(sales_i = -26.61 + 0.08 \\times advertsing_i + 3.37 \\times airplay_i + 11.09 \\times attractiveness_i\\) 8.4 Categorical Predictors American Median Household Incomes By Race: set.seed(100) race &lt;- c(rep(&quot;Asian&quot;,50),rep(&quot;White&quot;,50),rep(&quot;Hispanic&quot;,50),rep(&quot;Black&quot;,50)) income &lt;- c(rnorm(50,68636,10000),rnorm(50,57009),rnorm(50,39005,10000),rnorm(50,33321,10000)) df &lt;- data.frame(income,race) df &lt;- df[sample(1:nrow(df)),] library(knitr) kable(head(df,15)) income race 103 34313.53 Hispanic 56 57009.98 White 72 57007.94 White 87 57009.22 White 158 32332.17 Black 102 52636.14 Hispanic 136 43435.71 Hispanic 164 41267.80 Black 163 31548.28 Black 75 57006.94 White 30 71106.76 Asian 121 31267.87 Hispanic 54 57010.90 White 174 36215.84 Black 29 57058.71 Asian tapply(df$income, df$race, median) ## Asian Black Hispanic White ## 69304.33 33264.95 36328.17 57008.92 m &lt;- lm(income~race,data = df) summary(m) ## ## Call: ## lm(formula = income ~ race, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -21639.2 -3229.0 -0.3 2345.3 22287.9 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 69451.1 981.4 70.765 &lt; 2e-16 *** ## raceBlack -34909.4 1388.0 -25.152 &lt; 2e-16 *** ## raceHispanic -31444.0 1388.0 -22.655 &lt; 2e-16 *** ## raceWhite -12442.2 1388.0 -8.964 2.48e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 6940 on 196 degrees of freedom ## Multiple R-squared: 0.811, Adjusted R-squared: 0.8081 ## F-statistic: 280.3 on 3 and 196 DF, p-value: &lt; 2.2e-16 a &lt;- round(coef(m)[1],0) b1 &lt;- round(coef(m)[2],0) b2 &lt;- round(coef(m)[3],0) b3 &lt;- round(coef(m)[4],0) ## income = 69451 - 34909*Black - 31444*Hispanic - 12442*White summary(df$race) ## Asian Black Hispanic White ## 50 50 50 50 levels(df$race) ## [1] &quot;Asian&quot; &quot;Black&quot; &quot;Hispanic&quot; &quot;White&quot; contrasts(df$race) &lt;- contr.treatment(4,base = 2) df$race ## [1] Hispanic White White White Black Hispanic Hispanic ## [8] Black Black White Asian Hispanic White Black ## [15] Asian Black Asian Hispanic Hispanic Hispanic Black ## [22] White Hispanic Black Asian Black Asian Black ## [29] Asian Asian Black Asian White Asian Black ## [36] Black Hispanic Black White Hispanic Asian Asian ## [43] White Black White Hispanic White White Hispanic ## [50] Asian Asian Black Hispanic Black Black White ## [57] Hispanic White Hispanic Asian White Hispanic Black ## [64] Hispanic White Hispanic Asian Asian Black Asian ## [71] Black White Asian Asian Black Hispanic Black ## [78] Black White White Black Black Hispanic Asian ## [85] Black White Hispanic Hispanic Black Black Hispanic ## [92] Hispanic Asian Hispanic Asian White Black Black ## [99] Black Black Asian White Hispanic Hispanic Hispanic ## [106] Asian Hispanic Asian White Black White Black ## [113] Asian Asian White Black Asian Black Asian ## [120] White Asian White White Black White Hispanic ## [127] Black Hispanic White Asian Hispanic White Hispanic ## [134] Hispanic Asian Hispanic Hispanic White Hispanic Hispanic ## [141] White White Black Hispanic White White Asian ## [148] White Asian White Black Asian White White ## [155] White Hispanic Asian Hispanic White White Hispanic ## [162] Black Asian Asian White Asian White Hispanic ## [169] Asian Hispanic Black Hispanic Black White Asian ## [176] Hispanic Asian Black Asian White Hispanic Asian ## [183] Asian Asian Asian White Black Black Black ## [190] Hispanic Asian White Hispanic Asian Black Black ## [197] Asian White Black Hispanic ## attr(,&quot;contrasts&quot;) ## 1 3 4 ## Asian 1 0 0 ## Black 0 0 0 ## Hispanic 0 1 0 ## White 0 0 1 ## Levels: Asian Black Hispanic White m &lt;- lm(income~race,data = df) summary(m) ## ## Call: ## lm(formula = income ~ race, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -21639.2 -3229.0 -0.3 2345.3 22287.9 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 34541.7 981.4 35.195 &lt;2e-16 *** ## race1 34909.4 1388.0 25.152 &lt;2e-16 *** ## race3 3465.5 1388.0 2.497 0.0134 * ## race4 22467.2 1388.0 16.187 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 6940 on 196 degrees of freedom ## Multiple R-squared: 0.811, Adjusted R-squared: 0.8081 ## F-statistic: 280.3 on 3 and 196 DF, p-value: &lt; 2.2e-16 ## income = 34541 + 34909*Asian + 3465*Hispanic + 22467*White "],
["spatial-data.html", "9 Spatial Data 9.1 Read shapefile 9.2 Plot shapefile 9.3 Write shapefile 9.4 Get shapefile properties 9.5 Select by attribute 9.6 US Census Data 9.7 Census Data Mapping 9.8 Read single-band raster 9.9 Get raster properties 9.10 Read multi-band raster 9.11 Plot raster time series", " 9 Spatial Data 9.1 Read shapefile if(!require(rgdal)) install.packages(&quot;rgdal&quot;) setwd(&quot;data/shp_global110&quot;) # set working directory getwd() # print working directory ## [1] &quot;D:/Dropbox/GitHub/GEOG533/Lectures/data/shp_global110&quot; ## use readOGR(dsn, layer) to read shapefile land &lt;- readOGR(&quot;.&quot;, &quot;110m_land&quot;) # &quot;.&quot; represents current working directory ## OGR data source with driver: ESRI Shapefile ## Source: &quot;.&quot;, layer: &quot;110m_land&quot; ## with 127 features ## It has 2 fields admin &lt;- readOGR(&quot;.&quot;, &quot;110m_admin_0_countries&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;.&quot;, layer: &quot;110m_admin_0_countries&quot; ## with 177 features ## It has 24 fields plot(land) class(land) ## [1] &quot;SpatialPolygonsDataFrame&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; #str(land) # access some information about this object proj &lt;- proj4string(land) # get the projection / coordinate reference system proj ## [1] &quot;+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0&quot; bbox(land) # bounding box ## min max ## x -180 180.00000 ## y -90 83.64513 land@bbox ## min max ## x -180 180.00000 ## y -90 83.64513 xy &lt;- coordinates(land) # coordinates summary(xy) ## V1 V2 ## Min. :-179.924 Min. :-80.523 ## 1st Qu.: -92.680 1st Qu.: -6.587 ## Median : 9.084 Median : 24.506 ## Mean : 9.527 Mean : 24.642 ## 3rd Qu.: 124.901 3rd Qu.: 68.978 ## Max. : 179.469 Max. : 80.516 points(xy, pch=16,col=&quot;red&quot;) # These are only the centre coordinates of the polygons! # access the attribute table of a vector dataset with @data data.df &lt;- land@data library(knitr) kable(head(data.df,10)) FeatureCla FIRST_Scal 0 Country 1 1 Country 1 2 Country 1 3 Country 1 4 Country 1 5 Country 1 6 Country 1 7 Country 1 8 Country 1 9 Country 1 summary(data.df) ## FeatureCla FIRST_Scal ## Country:127 Min. :1 ## 1st Qu.:1 ## Median :1 ## Mean :1 ## 3rd Qu.:1 ## Max. :1 9.2 Plot shapefile setwd(&quot;data/shp_global110&quot;) getwd() ## [1] &quot;D:/Dropbox/GitHub/GEOG533/Lectures/data/shp_global110&quot; files &lt;- list.files(pattern=&quot;.shp&quot;) files # filenames of the files to be read ## [1] &quot;110m_admin_0_countries.shp&quot; &quot;110m_coastline.shp&quot; ## [3] &quot;110m_lakes.shp&quot; &quot;110m_land.shp&quot; ## [5] &quot;110m_ocean.shp&quot; &quot;110m_rivers_lake_centerlines.shp&quot; ## [7] &quot;continent.shp&quot; &quot;continent.shp.xml&quot; world &lt;- readOGR(&quot;.&quot;,&quot;110m_land&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;.&quot;, layer: &quot;110m_land&quot; ## with 127 features ## It has 2 fields plot(world,col=&quot;grey&quot;,border=&quot;blue&quot;,bg = &quot;lightblue&quot;) plot(admin,add=TRUE) lakes &lt;- readOGR(&quot;.&quot;,&quot;110m_lakes&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;.&quot;, layer: &quot;110m_lakes&quot; ## with 26 features ## It has 4 fields plot(lakes,add=TRUE,col = &quot;blue&quot;) ocean &lt;- readOGR(&quot;.&quot;,&quot;110m_ocean&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;.&quot;, layer: &quot;110m_ocean&quot; ## with 2 features ## It has 2 fields plot(ocean,add=TRUE,col = &quot;lightblue&quot;) 9.3 Write shapefile setwd(&quot;output&quot;) getwd() ## [1] &quot;D:/Dropbox/GitHub/GEOG533/Lectures/output&quot; library(rgdal) writeOGR(land,dsn = &quot;.&quot;,layer = &quot;land&quot;,driver=&quot;ESRI Shapefile&quot;,overwrite_layer = TRUE) shp &lt;- readOGR(dsn = &quot;.&quot;, layer = &quot;land&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;.&quot;, layer: &quot;land&quot; ## with 127 features ## It has 2 fields plot(shp) 9.4 Get shapefile properties bbox(shp) ## min max ## x -180 180.00000 ## y -90 83.64513 proj4string(shp) ## [1] &quot;+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0&quot; xy &lt;- coordinates(shp) df &lt;- shp@data names(df) ## [1] &quot;FeatureCla&quot; &quot;FIRST_Scal&quot; names(xy) ## NULL slotNames(shp) ## [1] &quot;data&quot; &quot;polygons&quot; &quot;plotOrder&quot; &quot;bbox&quot; &quot;proj4string&quot; plot(shp) points(xy, pch=16,col=&quot;red&quot;) 9.5 Select by attribute library(rgdal) setwd(&quot;data/shp_global110&quot;) folder &lt;- getwd() shp &lt;- readOGR(dsn = folder,layer = &quot;continent&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;D:/Dropbox/GitHub/GEOG533/Lectures/data/shp_global110&quot;, layer: &quot;continent&quot; ## with 8 features ## It has 1 fields plot(shp,col=&quot;grey&quot;) plot(shp,lwd=2,add=TRUE) df &lt;- shp@data library(knitr) kable(head(df,10)) CONTINENT 0 Asia 1 North America 2 Europe 3 Africa 4 South America 5 Oceania 6 Australia 7 Antarctica sel &lt;- df$CONTINENT == &quot;North America&quot; plot(shp[sel,]) 9.6 US Census Data if(!require(UScensus2010)) install.packages(&quot;UScensus2010&quot;) library(UScensus2010) if(!require(UScensus2010county)) install.county(&quot;osx&quot;) ## ## UScensus2010county: US Census 2010 County Level Shapefiles and Additional ## Demographic Data ## Version 1.00 created on 2011-11-06 ## copyright (c) 2011, Zack W. Almquist, University of California-Irvine ## Type help(package=&quot;UScensus2010county&quot;) to get started. ## ## For citation information, type citation(&quot;UScensus2010county&quot;). if(!require(UScensus2010tract)) install.county(&quot;osx&quot;) ## ## UScensus2010tract: US Census 2010 Tract Level Shapefiles and Additional Demographic ## Data ## Version 1.00 created on 2011-11-06 ## copyright (c) 2011, Zack W. Almquist, University of California-Irvine ## Type help(package=&quot;UScensus2010tract&quot;) to get started. ## ## For citation information, type citation(&quot;UScensus2010tract&quot;). library(UScensus2010county) library(UScensus2010tract) data(oregon.county10) shp &lt;- oregon.county10 plot(shp) 9.7 Census Data Mapping library(UScensus2010county) data(oregon.county10) shp &lt;- oregon.county10 df &lt;- shp@data library(knitr) kable(head(df,10)) NAME10 NAMELSAD10 state county fipsoregon.county10_0 Morrow Morrow County 41 049 41049 11173 11173 0 0 0 0 11173 11173 8680 55 139 104 14 1892 289 11173 7676 3497 11173 7676 7218 36 112 100 13 16 181 3497 1462 19 27 4 1 1876 108 11484 8934 93 288 147 26 1996 11484 7869 7382 67 239 138 21 22 3615 1552 26 49 9 5 1974 11173 10884 8680 55 139 104 14 1892 289 270 16 107 27 4 81 9 1 0 2 7 0 10 0 2 4 16 5 2 0 0 3 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 11173 3497 7676 7495 7218 36 112 100 13 16 181 169 16 103 26 4 3 8 1 0 0 7 0 0 0 1 0 12 4 2 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4442 4442 0 0 0 0 4442 4442 3916 526 3916 1706 1093 1117 526 70 4 55 10 242 2 143 3916 3277 14 47 26 2 470 80 3916 3090 2945 11 41 26 2 4 61 826 332 3 6 0 0 466 19 3999 3350 17 102 37 5 488 3999 3152 3002 13 92 36 4 5 847 348 4 10 1 1 483 11150 11150 5289 2656 3205 2.85 2.84 2.87 3916 749 1408 608 498 359 171 123 3916 2799 2399 6 28 6 2 311 47 1117 878 8 19 20 0 159 33 3916 2799 2258 541 1117 832 285 3916 2799 455 1116 446 337 245 115 85 1117 294 292 162 161 114 56 38 3916 2799 55 264 474 618 327 321 434 242 64 1117 106 277 237 198 77 69 74 40 39 3916 2799 2228 1874 202 1244 428 354 136 42 73 21 218 45 128 45 571 302 226 9 136 81 76 10 45 21 269 229 7 89 133 40 4 25 11 1117 725 464 165 248 51 261 105 56 48 1 156 68 77 11 392 239 167 27 104 36 72 36 35 1 153 127 21 53 53 26 10 16 0 3916 2799 986 1813 1117 486 631 3916 68 3848 526 20 506 3848 164 3684 8762 4417 2015 2330 49 14 3 32 131 43 34 54 92 9 8 75 11 1 10 0 1874 700 546 628 oregon.county10_1 Clatsop Clatsop County 41 007 41007 37039 37039 0 0 0 0 37039 37039 33680 195 362 457 86 1208 1051 37039 34201 2838 37039 34201 32295 163 308 445 84 48 858 2838 1385 32 54 12 2 1160 193 38187 34660 337 864 765 212 1349 38187 35134 33097 280 744 729 196 88 3053 1563 57 120 36 16 1261 37039 35988 33680 195 362 457 86 1208 1051 963 111 435 197 48 104 3 1 1 2 9 1 2 31 16 2 79 13 4 0 0 12 10 7 25 4 1 1 0 1 0 0 0 1 0 0 0 9 1 1 1 1 1 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 37039 2838 34201 33343 32295 163 308 445 84 48 858 790 93 384 190 42 26 3 1 1 0 8 1 0 30 10 1 61 12 3 0 0 12 9 1 22 1 0 0 0 0 0 0 0 1 0 0 0 7 1 1 0 1 1 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 21546 21546 0 0 0 0 21546 21546 15742 5804 15742 6296 3384 6062 5804 611 44 360 47 4298 4 440 15742 14753 54 133 155 24 305 318 15742 15053 14416 44 116 150 24 19 284 689 337 10 17 5 0 286 34 16085 15055 84 323 227 60 336 16085 15360 14687 67 293 219 58 36 725 368 17 30 8 2 300 36083 36083 16228 6295 13560 2.29 2.33 2.24 15742 4963 5906 2143 1568 697 278 187 15742 9680 9278 24 60 106 11 63 138 6062 5475 30 73 49 13 242 180 15742 9680 9496 184 6062 5557 505 15742 9680 2480 4276 1304 977 386 149 108 6062 2483 1630 839 591 311 129 79 15742 9680 87 614 1070 2031 1388 1341 1769 1041 339 6062 563 1309 1037 1130 540 438 472 318 255 15742 9680 6662 5708 430 3642 1636 954 347 54 229 64 607 55 367 185 3018 1394 1081 69 641 371 313 59 191 63 1624 1399 19 598 782 225 15 162 48 6062 2917 1603 581 855 167 1314 417 181 216 20 897 336 493 68 3145 1602 1201 267 682 252 401 199 184 18 1543 1282 171 599 512 261 137 116 8 15742 9680 2205 7475 6062 1878 4184 15742 194 15548 5804 84 5720 15548 593 14955 33235 15353 6052 11830 119 48 11 60 351 131 31 189 352 204 53 95 73 27 7 39 1146 219 41 886 oregon.county10_2 Benton Benton County 41 003 41003 85579 85579 0 0 0 0 85579 85579 74506 759 627 4429 213 1985 3060 85579 80112 5467 85579 80112 71552 715 493 4404 199 156 2593 5467 2954 44 134 25 14 1829 467 88922 77368 1267 1625 5776 548 2338 88922 82934 73985 1164 1362 5679 508 236 5988 3383 103 263 97 40 2102 85579 82519 74506 759 627 4429 213 1985 3060 2799 355 834 1033 127 256 16 20 4 17 10 1 16 81 25 4 245 54 16 2 7 37 2 13 99 9 2 1 0 0 3 0 0 0 0 0 0 10 2 1 2 2 0 0 1 2 0 0 0 0 0 0 0 6 6 0 0 0 0 0 0 0 85579 5467 80112 77519 71552 715 493 4404 199 156 2593 2381 324 745 999 118 38 13 20 4 9 9 1 4 78 17 2 201 49 15 1 1 30 2 5 91 3 1 1 0 0 2 0 0 0 0 0 0 5 2 1 0 1 0 0 1 0 0 0 0 0 0 0 0 6 6 0 0 0 0 0 0 0 36245 36245 0 0 0 0 36245 36245 34317 1928 34317 12844 6334 15139 1928 654 69 330 91 311 6 467 34317 30795 251 234 1552 66 549 870 34317 32798 29945 238 196 1544 63 54 758 1519 850 13 38 8 3 495 112 35262 31603 377 592 1890 154 646 35262 33619 30653 352 517 1866 146 85 1643 950 25 75 24 8 561 80536 80536 35212 12448 32876 2.35 2.49 2.17 34317 9688 13204 5027 3945 1636 549 268 34317 19178 18002 66 101 546 15 154 294 15139 12793 185 133 1006 51 395 576 34317 19178 18706 472 15139 14092 1047 34317 19178 3907 8278 2984 2548 982 331 148 15139 5781 4926 2043 1397 654 218 120 34317 19178 189 1257 2774 4446 2811 2393 2855 1778 675 15139 5325 3934 1845 1552 632 472 454 421 504 34317 19178 14243 12580 882 8665 3033 1663 515 71 368 76 1148 72 791 285 4935 2071 1542 114 950 478 529 149 300 80 2864 2365 65 1044 1256 499 93 306 100 15139 5013 2950 1388 1340 222 2063 715 428 273 14 1348 610 687 51 10126 5353 2944 1653 1009 282 2409 2162 225 22 4773 2837 1238 825 774 1936 1780 142 14 34317 19178 5437 13741 15139 2862 12277 34317 620 33697 1928 64 1864 33697 840 32857 71675 32465 11794 27416 577 162 30 385 587 217 45 325 3610 1190 343 2077 188 47 5 136 1816 452 108 1256 oregon.county10_3 Hood River Hood River County 41 027 41027 22346 22346 0 0 0 0 22346 22346 18568 101 181 314 37 2439 706 22346 15757 6589 22346 15757 14714 63 144 305 30 25 476 6589 3854 38 37 9 7 2414 230 23106 19232 190 398 527 116 2643 23106 16269 15166 134 334 501 98 36 6837 4066 56 64 26 18 2607 22346 21640 18568 101 181 314 37 2439 706 661 54 188 168 35 174 6 1 0 7 1 1 1 20 0 5 40 6 5 0 5 1 2 6 10 3 2 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 4 4 0 0 0 0 0 0 0 22346 6589 15757 15281 14714 63 144 305 30 25 476 448 52 172 157 33 10 3 1 0 0 1 1 0 17 0 1 24 6 5 0 0 1 2 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 4 0 0 0 0 0 0 0 9271 9271 0 0 0 0 9271 9271 8173 1098 8173 3428 1712 3033 1098 164 10 108 22 497 101 196 8173 7187 30 72 139 11 564 170 8173 6702 6345 21 63 139 10 9 115 1471 842 9 9 0 1 555 55 8361 7344 41 147 173 34 622 8361 6827 6451 28 130 173 31 14 1534 893 13 17 0 3 608 21559 21559 9911 3727 7921 2.64 2.65 2.61 8173 1945 2776 1327 1198 539 244 144 8173 5140 4658 17 38 95 4 240 88 3033 2529 13 34 44 7 324 82 8173 5140 4529 611 3033 2173 860 8173 5140 962 2029 851 796 287 129 86 3033 983 747 476 402 252 115 58 8173 5140 34 392 916 1314 675 490 675 457 187 3033 198 737 653 559 227 148 161 188 162 8173 5140 3919 3361 268 2378 715 558 188 30 128 30 370 34 238 98 1221 521 387 23 252 112 134 36 76 22 700 575 15 236 324 125 20 87 18 3033 1740 1168 363 706 99 572 185 72 108 5 387 140 225 22 1293 659 466 110 265 91 193 109 75 9 634 517 62 176 279 117 79 32 6 8173 5140 1731 3409 3033 1197 1836 8173 115 8058 1098 30 1068 8058 304 7754 18200 8700 3284 6216 107 45 18 44 182 66 26 90 313 124 101 88 38 9 3 26 2173 734 232 1207 oregon.county10_4 Polk Polk County 41 053 41053 75403 75403 0 0 0 0 75403 75403 64808 424 1616 1435 210 4041 2869 75403 66315 9088 75403 66315 60702 394 1380 1403 201 79 2156 9088 4106 30 236 32 9 3962 713 78519 67459 904 2855 2216 502 4583 78519 68640 62727 790 2443 2095 455 130 9879 4732 114 412 121 47 4453 75403 72534 64808 424 1616 1435 210 4041 2869 2645 311 1010 560 140 409 30 17 7 8 18 3 48 54 15 15 203 64 11 4 10 29 8 13 43 12 6 1 0 0 0 0 0 1 0 0 1 19 9 2 0 3 1 0 0 1 0 3 0 0 0 0 0 2 2 0 0 0 0 0 0 0 75403 9088 66315 64159 60702 394 1380 1403 201 79 2156 2005 273 921 523 130 29 26 15 7 2 16 3 0 50 2 8 135 48 7 4 0 25 7 4 35 3 0 1 0 0 0 0 0 1 0 0 0 14 6 2 0 3 0 0 0 1 0 2 0 0 0 0 0 2 2 0 0 0 0 0 0 0 30302 30302 0 0 0 0 30302 30302 28288 2014 28288 13602 5134 9552 2014 838 33 448 85 202 6 402 28288 25441 127 557 415 54 1004 690 28288 26144 24471 123 500 407 52 30 561 2144 970 4 57 8 2 974 129 29030 26073 211 940 565 121 1120 29030 26747 24992 198 850 548 112 47 2283 1081 13 90 17 9 1073 73518 73518 39105 10022 24391 2.60 2.62 2.55 28288 6495 10545 4402 3679 1870 797 500 28288 18736 17380 61 266 242 23 428 336 9552 8061 66 291 173 31 576 354 28288 18736 17741 995 9552 8403 1149 28288 18736 3546 7875 2841 2449 1204 502 319 9552 2949 2670 1561 1230 666 295 181 28288 18736 180 1639 2914 3831 2316 2261 3012 1929 654 9552 1696 2241 1647 1424 576 452 548 487 481 28288 18736 14413 12489 1262 7968 3259 1924 610 107 397 106 1314 132 835 347 4323 1770 1370 106 781 483 400 102 227 71 2553 2176 62 875 1239 377 48 239 90 9552 5132 2848 1093 1437 318 2284 696 319 352 25 1588 665 839 84 4420 1996 1245 365 610 270 751 546 183 22 2424 1704 351 573 780 720 598 105 17 28288 18736 5666 13070 9552 3487 6065 28288 384 27904 2014 63 1951 27904 1179 26725 64142 35121 9403 19618 348 141 20 187 1637 677 155 805 1195 673 98 424 202 90 4 108 4026 1551 227 2248 oregon.county10_5 Lane Lane County 41 039 41039 351715 351715 0 0 0 0 351715 351715 310685 3369 4070 8322 769 9837 14663 351715 325548 26167 351715 325548 297808 3102 3418 8169 732 514 11805 26167 12877 267 652 153 37 9323 2858 367715 324567 6203 10868 12484 1790 11803 367715 338355 309080 5559 9251 12001 1625 839 29360 15487 644 1617 483 165 10964 351715 337052 310685 3369 4070 8322 769 9837 14663 13446 1938 5704 3129 415 1501 137 58 18 54 63 24 89 186 101 29 1114 393 84 21 40 174 42 71 224 39 5 8 0 2 0 1 1 2 3 1 3 86 33 3 11 17 1 0 11 8 2 0 0 0 0 0 0 17 13 0 0 0 3 1 0 0 351715 26167 325548 313743 297808 3102 3418 8169 732 514 11805 10871 1769 5044 2992 378 169 111 53 18 8 46 22 14 177 62 8 874 335 70 20 14 152 32 20 202 14 2 8 0 1 0 1 0 1 0 0 2 52 21 3 5 12 1 0 8 2 0 0 0 0 0 0 0 8 6 0 0 0 1 1 0 0 156112 156112 0 0 0 0 156112 156112 145966 10146 145966 59932 27296 58738 10146 3064 203 1761 328 2663 5 2122 145966 133312 1185 1419 2980 251 2662 4157 145966 138971 129691 1130 1254 2940 240 185 3531 6995 3621 55 165 40 11 2477 626 150434 137212 1705 3831 4007 532 3147 150434 142746 133032 1592 3424 3891 489 318 7688 4180 113 407 116 43 2829 343185 343185 159154 52046 131985 2.35 2.42 2.25 145966 42178 54933 21976 15979 6862 2535 1503 145966 87228 82159 381 677 1187 103 991 1730 58738 51153 804 742 1793 148 1671 2427 145966 87228 84420 2808 58738 54551 4187 145966 87228 20016 37561 13052 10068 4160 1487 884 58738 22162 17372 8924 5911 2702 1048 619 145966 87228 803 7032 11916 17728 11699 11156 14574 8873 3447 58738 11068 14772 9617 8748 3823 2995 3249 2315 2151 145966 87228 61677 51748 4596 32963 14189 9929 3074 454 2106 514 6855 695 4227 1933 25551 10882 8033 639 4623 2771 2849 683 1682 484 14669 11983 332 5197 6454 2686 436 1701 549 58738 25261 12967 5064 6654 1249 12294 3608 1608 1861 139 8686 3654 4563 469 33477 16859 10714 3838 5256 1620 6145 4509 1499 137 16618 11448 3192 4316 3940 5170 3975 1034 161 145966 87228 22047 65181 58738 16288 42450 145966 2201 143765 10146 412 9734 143765 4775 138990 308829 146780 49452 112597 2877 912 118 1847 3778 1510 340 1928 7017 2733 657 3627 697 284 26 387 9455 3194 586 5675 oregon.county10_6 Wallowa Wallowa County 41 063 41063 7008 7008 0 0 0 0 7008 7008 6731 26 45 24 7 37 138 7008 6852 156 7008 6852 6625 26 38 24 6 7 126 156 106 0 7 0 1 30 12 7154 6865 46 125 56 18 44 7154 6986 6747 45 113 55 15 11 168 118 1 12 1 3 33 7008 6870 6731 26 45 24 7 37 138 130 16 74 24 5 7 1 0 0 0 1 0 0 2 0 0 8 3 0 0 0 1 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7008 156 6852 6726 6625 26 38 24 6 7 126 118 15 69 23 3 4 1 0 0 0 1 0 0 2 0 0 8 3 0 0 0 1 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4108 4108 0 0 0 0 4108 4108 3133 975 3133 1167 1071 895 975 42 7 63 12 693 1 157 3133 3045 8 17 5 2 12 44 3133 3087 3014 8 14 5 1 4 41 46 31 0 3 0 1 8 3 3180 3088 11 50 13 5 13 3180 3131 3054 10 45 13 4 5 49 34 1 5 0 1 8 6903 6903 2963 2026 1914 2.20 2.23 2.14 3133 941 1365 371 276 104 49 27 3133 2238 2189 2 11 2 0 5 29 895 856 6 6 3 2 7 15 3133 2238 2219 19 895 868 27 3133 2238 548 1126 257 192 66 30 19 895 393 239 114 84 38 19 8 3133 2238 9 131 203 404 328 310 472 271 110 895 88 176 134 182 78 67 84 58 28 3133 2238 1579 1421 83 834 504 158 58 7 34 17 100 7 59 34 659 335 260 21 125 114 75 11 45 19 324 288 6 120 162 36 5 28 3 895 445 280 74 168 38 165 43 21 22 0 122 61 52 9 450 237 200 56 99 45 37 13 18 6 213 193 28 94 71 20 11 8 1 3133 2238 434 1804 895 266 629 3133 24 3109 975 7 968 3109 147 2962 6687 2894 1984 1809 16 7 0 9 47 20 9 18 12 4 0 8 10 0 0 10 37 11 3 23 oregon.county10_7 Harney Harney County 41 025 41025 7422 7422 0 0 0 0 7422 7422 6819 19 232 35 1 95 221 7422 7128 294 7422 7128 6648 16 227 34 1 6 196 294 171 3 5 1 0 89 25 7650 7034 36 383 70 13 114 7650 7330 6838 32 375 65 13 7 320 196 4 8 5 0 107 7422 7201 6819 19 232 35 1 95 221 214 13 139 35 4 17 1 0 0 0 0 4 1 0 0 0 7 2 0 0 1 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7422 294 7128 6932 6648 16 227 34 1 6 196 190 13 136 31 4 0 1 0 0 0 0 4 1 0 0 0 6 2 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3835 3835 0 0 0 0 3835 3835 3205 630 3205 1210 992 1003 630 128 7 55 9 144 13 274 3205 3004 7 92 11 0 23 68 3205 3120 2947 6 88 11 0 2 66 85 57 1 4 0 0 21 2 3275 3069 13 148 15 4 26 3275 3188 3010 12 144 15 4 3 87 59 1 4 0 0 23 7295 7295 3149 1925 2221 2.28 2.30 2.21 3205 962 1319 386 296 156 54 32 3205 2202 2085 3 59 8 0 8 39 1003 919 4 33 3 0 15 29 3205 2202 2160 42 1003 960 43 3205 2202 553 1035 260 194 101 39 20 1003 409 284 126 102 55 15 12 3205 2202 35 160 243 466 289 265 402 258 84 1003 99 194 186 181 73 81 87 58 44 3205 2202 1559 1349 126 819 404 210 72 13 47 12 138 16 87 35 643 350 295 22 156 117 55 5 36 14 293 258 5 100 153 35 8 18 9 1003 510 319 87 198 34 191 47 28 17 2 144 58 79 7 493 292 239 56 123 60 53 23 27 3 201 170 20 67 83 31 21 10 0 3205 2202 516 1686 1003 329 674 3205 57 3148 630 23 607 3148 151 2997 6784 2965 1815 2004 13 5 1 7 219 69 79 71 25 10 11 4 0 0 0 0 83 29 1 53 oregon.county10_8 Crook Crook County 41 013 41013 20978 20978 0 0 0 0 20978 20978 19441 35 302 97 11 670 422 20978 19515 1463 20978 19515 18758 30 273 96 11 12 335 1463 683 5 29 1 0 658 87 21428 19843 81 572 164 35 733 21428 19869 19089 72 516 146 30 16 1559 754 9 56 18 5 717 20978 20556 19441 35 302 97 11 670 422 394 38 247 41 9 42 1 0 0 0 0 2 5 1 8 0 28 5 0 0 2 4 1 2 8 3 0 0 0 0 0 0 0 2 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 20978 1463 19515 19180 18758 30 273 96 11 12 335 316 36 228 39 9 1 1 0 0 0 0 1 0 1 0 0 19 5 0 0 0 4 1 2 6 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10202 10202 0 0 0 0 10202 10202 8558 1644 8558 4005 2088 2465 1644 290 9 264 54 707 19 301 8558 8108 6 110 22 4 171 137 8558 8179 7921 4 105 22 4 5 118 379 187 2 5 0 0 166 19 8701 8240 12 219 32 10 188 8701 8303 8038 9 208 30 10 8 398 202 3 11 2 0 180 20733 20733 10412 4111 6210 2.42 2.38 2.52 8558 2065 3617 1214 945 431 183 103 8558 6093 5810 6 77 16 3 98 83 2465 2298 0 33 6 1 73 54 8558 6093 5876 217 2465 2303 162 8558 6093 1283 2935 839 599 258 108 71 2465 782 682 375 346 173 75 32 8558 6093 61 439 713 1180 705 786 1325 672 212 2465 188 522 458 488 181 174 226 136 92 8558 6093 4540 4013 327 2313 1373 527 172 36 110 26 355 40 196 119 1553 772 610 47 336 227 162 21 86 55 781 673 15 273 385 108 14 70 24 2465 1485 877 262 508 107 608 196 80 110 6 412 165 215 32 980 509 393 74 231 88 116 52 47 17 471 389 42 158 189 82 35 32 15 8558 6093 1405 4688 2465 960 1505 8558 314 8244 1644 33 1611 8244 448 7796 19374 9833 3818 5723 11 7 4 0 274 153 41 80 75 38 18 19 6 2 2 2 663 217 183 263 oregon.county10_9 Yamhill Yamhill County 41 071 41071 99193 99193 0 0 0 0 99193 99193 84758 872 1520 1474 172 7137 3260 99193 84601 14592 99193 84601 78448 784 1272 1418 163 143 2373 14592 6310 88 248 56 9 6994 887 102708 87781 1344 2909 2362 437 7875 102708 87150 80695 1176 2449 2206 395 229 15558 7086 168 460 156 42 7646 99193 95933 84758 872 1520 1474 172 7137 3260 3021 321 1150 629 110 580 24 9 3 15 20 8 52 57 34 9 223 57 19 0 10 38 5 19 60 9 2 0 0 1 1 0 0 2 0 0 0 16 2 1 5 2 0 0 2 1 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 99193 14592 84601 82228 78448 784 1272 1418 163 143 2373 2204 290 1038 594 99 59 21 7 3 4 16 7 3 55 5 3 162 47 13 0 2 31 3 5 56 3 0 0 0 0 1 0 0 1 0 0 0 7 2 1 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 37110 37110 0 0 0 0 37110 37110 34726 2384 34726 17419 6114 11193 2384 774 62 570 98 316 23 541 34726 31509 130 503 332 44 1503 705 34726 31630 30113 116 444 321 42 29 565 3096 1396 14 59 11 2 1474 140 35488 32163 189 912 485 102 1637 35488 32233 30648 168 811 460 93 53 3255 1515 21 101 25 9 1584 93732 93732 51454 12299 29979 2.70 2.71 2.68 34726 7527 12320 5568 4910 2563 1100 738 34726 23533 21942 65 261 219 26 644 376 11193 9567 65 242 113 18 859 329 34726 23533 22118 1415 11193 9512 1681 34726 23533 4175 9440 3769 3366 1619 699 465 11193 3352 2880 1799 1544 944 401 273 34726 23533 236 2277 4002 5302 2828 2569 3481 2066 772 11193 1123 2662 2239 1928 733 533 688 694 593 34726 23533 18323 15675 1728 10357 3590 2648 859 161 561 137 1789 199 1126 464 5210 2295 1708 139 1024 545 587 147 344 96 2915 2467 68 1008 1391 448 71 281 96 11193 6697 3757 1316 1991 450 2940 881 371 473 37 2059 886 1073 100 4496 2097 1421 309 747 365 676 385 264 27 2399 1931 236 740 955 468 282 145 41 34726 23533 7729 15804 11193 4704 6489 34726 345 34381 2384 62 2322 34381 1343 33038 82107 46254 11602 24251 368 172 24 172 1412 657 107 648 944 556 97 291 141 81 5 55 6614 2698 339 3577 plot(shp) if(!require(tmap)) install.packages(&quot;tmap&quot;) library(tmap) qtm(shp) qtm(shp,fill = &quot;NAME10&quot;) qtm(shp,fill = &quot;P0010001&quot;) pop &lt;- df$P0010001 hist(pop) summary(pop) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1441 19770 41540 106400 101300 735300 9.8 Read single-band raster setwd(&quot;data/gimms_ndvi/&quot;) getwd() ## [1] &quot;D:/Dropbox/GitHub/GEOG533/Lectures/data/gimms_ndvi&quot; if(!require(ncdf4)) install.packages(&quot;ncdf4&quot;) library(ncdf4) library(raster) ndvi &lt;- raster(&quot;GIMMS.NDVI.360.720.2000.2002.30days.nc&quot;) ndvi ## class : RasterLayer ## band : 1 (of 36 bands) ## dimensions : 360, 720, 259200 (nrow, ncol, ncell) ## resolution : 0.5, 0.5 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## coord. ref. : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 ## data source : D:\\Dropbox\\GitHub\\GEOG533\\Lectures\\data\\gimms_ndvi\\GIMMS.NDVI.360.720.2000.2002.30days.nc ## names : Normalized.Difference.Vegetation.Index ## z-value : 2000-01-01 ## zvar : NDVI plot(ndvi) str(ndvi) ## Formal class &#39;RasterLayer&#39; [package &quot;raster&quot;] with 12 slots ## ..@ file :Formal class &#39;.RasterFile&#39; [package &quot;raster&quot;] with 13 slots ## .. .. ..@ name : chr &quot;D:\\\\Dropbox\\\\GitHub\\\\GEOG533\\\\Lectures\\\\data\\\\gimms_ndvi\\\\GIMMS.NDVI.360.720.2000.2002.30days.nc&quot; ## .. .. ..@ datanotation: chr &quot;FLT4S&quot; ## .. .. ..@ byteorder : chr &quot;little&quot; ## .. .. ..@ nodatavalue : num -3.4e+38 ## .. .. ..@ NAchanged : logi FALSE ## .. .. ..@ nbands : int 36 ## .. .. ..@ bandorder : chr &quot;BIL&quot; ## .. .. ..@ offset : int 0 ## .. .. ..@ toptobottom : logi FALSE ## .. .. ..@ blockrows : int 0 ## .. .. ..@ blockcols : int 0 ## .. .. ..@ driver : chr &quot;netcdf&quot; ## .. .. ..@ open : logi FALSE ## ..@ data :Formal class &#39;.SingleLayerData&#39; [package &quot;raster&quot;] with 13 slots ## .. .. ..@ values : logi(0) ## .. .. ..@ offset : num 0 ## .. .. ..@ gain : num 1 ## .. .. ..@ inmemory : logi FALSE ## .. .. ..@ fromdisk : logi TRUE ## .. .. ..@ isfactor : logi FALSE ## .. .. ..@ attributes: list() ## .. .. ..@ haveminmax: logi FALSE ## .. .. ..@ min : num Inf ## .. .. ..@ max : num -Inf ## .. .. ..@ band : int 1 ## .. .. ..@ unit : chr &quot;&quot; ## .. .. ..@ names : chr &quot;Normalized.Difference.Vegetation.Index&quot; ## ..@ legend :Formal class &#39;.RasterLegend&#39; [package &quot;raster&quot;] with 5 slots ## .. .. ..@ type : chr(0) ## .. .. ..@ values : logi(0) ## .. .. ..@ color : logi(0) ## .. .. ..@ names : logi(0) ## .. .. ..@ colortable: logi(0) ## ..@ title : chr(0) ## ..@ extent :Formal class &#39;Extent&#39; [package &quot;raster&quot;] with 4 slots ## .. .. ..@ xmin: num -180 ## .. .. ..@ xmax: num 180 ## .. .. ..@ ymin: num -90 ## .. .. ..@ ymax: num 90 ## ..@ rotated : logi FALSE ## ..@ rotation:Formal class &#39;.Rotation&#39; [package &quot;raster&quot;] with 2 slots ## .. .. ..@ geotrans: num(0) ## .. .. ..@ transfun:function () ## ..@ ncols : int 720 ## ..@ nrows : int 360 ## ..@ crs :Formal class &#39;CRS&#39; [package &quot;sp&quot;] with 1 slot ## .. .. ..@ projargs: chr &quot;+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0&quot; ## ..@ history : list() ## ..@ z :List of 1 ## .. ..$ : Date[1:1], format: &quot;2000-01-01&quot; 9.9 Get raster properties nrow(ndvi) ## [1] 360 ncol(ndvi) ## [1] 720 ncell(ndvi) ## [1] 259200 extent(ndvi) ## class : Extent ## xmin : -180 ## xmax : 180 ## ymin : -90 ## ymax : 90 bbox(ndvi) ## min max ## s1 -180 180 ## s2 -90 90 res(ndvi) ## [1] 0.5 0.5 projection(ndvi) ## [1] &quot;+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0&quot; 9.10 Read multi-band raster setwd(&quot;data/gimms_ndvi/&quot;) getwd() ## [1] &quot;D:/Dropbox/GitHub/GEOG533/Lectures/data/gimms_ndvi&quot; ndvi.rb &lt;- brick(&quot;GIMMS.NDVI.360.720.2000.2002.30days.nc&quot;) ndvi.rb ## class : RasterBrick ## dimensions : 360, 720, 259200, 36 (nrow, ncol, ncell, nlayers) ## resolution : 0.5, 0.5 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## coord. ref. : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 ## data source : D:\\Dropbox\\GitHub\\GEOG533\\Lectures\\data\\gimms_ndvi\\GIMMS.NDVI.360.720.2000.2002.30days.nc ## names : X2000.01.01, X2000.02.01, X2000.03.01, X2000.04.01, X2000.05.01, X2000.06.01, X2000.07.01, X2000.08.01, X2000.09.01, X2000.10.01, X2000.11.01, X2000.12.01, X2001.01.01, X2001.02.01, X2001.03.01, ... ## Date : 2000-01-01, 2002-12-01 (min, max) ## varname : NDVI ndvi2000 &lt;- ndvi.rb[[1:12]] # select bands as a new raster plot(ndvi.rb) # plot all bands plot(ndvi.rb,6) # plot a single band plot(ndvi.rb,1:12) # plot selected bands 9.11 Plot raster time series plot(ndvi.rb,1) #values &lt;- click(ndvi.rb, n=1, xy=TRUE) #values &lt;- click(ndvi.rb, n=1, xy=FALSE) values &lt;- ndvi.rb[50,50] plot(as.vector(values), type=&quot;b&quot;) "],
["references.html", "References", " References bookdown: Authoring Books with R Markdown htmlwidgets for R R Markdown Cheat Sheet - RStudio Statistical Methods for Geography R Cookbook Online LaTex Equation Editor Roger’s Online Equation Editor RawGit "],
["web-mapping-1.html", "Web Mapping", " Web Mapping knitr::include_url(&quot;http://spatial.binghamton.edu/leaflet/hometown&quot;, height = &quot;600px&quot;) knitr::include_app(&quot;https://yihui.shinyapps.io/miniUI/&quot;, height = &quot;600px&quot;) "]
]
